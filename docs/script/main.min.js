/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/corolla.ts":
/*!***************************!*\
  !*** ./src/ts/corolla.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Corolla = void 0;
var noise_1 = __webpack_require__(/*! ./noise */ "./src/ts/noise.ts");
var parameters_1 = __webpack_require__(/*! ./parameters */ "./src/ts/parameters.ts");
function randomColor() {
    var random = noise_1.Noise.randomInRange(0, 3);
    var randomChannel = Math.floor(0.5 * 255 * (random % 1));
    if (random < 1) {
        return { r: 255, g: 0, b: 255 - randomChannel };
    }
    else if (random < 2) {
        return { r: 255, g: randomChannel, b: 0 };
    }
    else if (random < 3) {
        return { r: 255 - randomChannel, g: 255, b: 0 };
    }
    else if (random < 4) {
        return { r: 0, g: 255, b: randomChannel };
    }
    else if (random < 5) {
        return { r: 0, g: 255 - randomChannel, b: 255 };
    }
    else {
        return { r: randomChannel, g: 0, b: 255 };
    }
}
var PETALS_DROP_RATE = 0.1;
var Corolla = (function () {
    function Corolla() {
        this.position = { x: 0, y: 0 };
        this.resetPetalColors();
        this.attachedPetals = this.computePetals(10);
        this.floatingPetals = [];
        this.outline = Corolla.computeOutline(40, 20);
        this.noise = new noise_1.Noise(noise_1.Noise.randomInRange(1, 2));
    }
    Corolla.prototype.update = function (dt) {
        if (this.attachedPetals.length > 0 && Math.random() < PETALS_DROP_RATE * dt) {
            var newFreePetal = this.attachedPetals.pop();
            this.registerFloatingPetal(newFreePetal);
        }
        for (var _i = 0, _a = this.floatingPetals; _i < _a.length; _i++) {
            var detachedPetal = _a[_i];
            detachedPetal.center.y -= 0.05 * detachedPetal.petalArea * dt;
            detachedPetal.orientation += detachedPetal.rotationSpeed * dt;
        }
        this.trimFloatingPetals();
        this.wind = this.noise.compute(dt);
        this.wind.x = parameters_1.Parameters.wind * 10000 * (this.wind.x - 0.5);
        this.wind.y = 1000 * (this.wind.y - 0.5);
    };
    Corolla.prototype.draw = function (plotter) {
        this.drawOutline(plotter);
        this.drawPetals(plotter);
    };
    Corolla.prototype.getAcceleration = function (forceField) {
        var acceleration = { x: 0, y: 0 };
        acceleration.x += this.wind.x * Math.min(1, this.attachedPetals.length / 16);
        acceleration.y += this.wind.y;
        var DOWNWARD_FORCE = 10000;
        var UPWARD_FORCE = [7000, 10000, 11000, 12000];
        acceleration.y += DOWNWARD_FORCE - UPWARD_FORCE[Math.min(UPWARD_FORCE.length - 1, this.attachedPetals.length)];
        var fieldForce = forceField.computeForce(this.position);
        acceleration.x += 2000 * fieldForce.x;
        acceleration.y += 2000 * fieldForce.y;
        return acceleration;
    };
    Corolla.prototype.isDead = function (lowestAllowed) {
        return this.attachedPetals.length <= 0 && this.floatingPetals.length <= 0 && this.position.y > lowestAllowed + 50;
    };
    Corolla.prototype.resetPetalColors = function () {
        var color = parameters_1.Parameters.singlePetalColor ? parameters_1.Parameters.petalColor : randomColor();
        this.color = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 0.2)";
    };
    Corolla.prototype.drawPetals = function (plotter) {
        var allPetals = this.attachedPetals.concat(this.floatingPetals);
        plotter.drawEllipsis(allPetals, this.color);
    };
    Corolla.prototype.drawOutline = function (plotter) {
        plotter.drawPolygon(this.outline, this.position, parameters_1.Parameters.linesColor, parameters_1.Parameters.backgroundColor);
    };
    Corolla.prototype.trimFloatingPetals = function () {
        for (var iP = this.floatingPetals.length - 1; iP >= 0; iP--) {
            var highestPoint = this.floatingPetals[iP].center.y + 0.5 * Math.max(this.floatingPetals[iP].width, this.floatingPetals[iP].height);
            if (highestPoint < 0) {
                this.floatingPetals.splice(iP, 1);
                iP--;
            }
        }
    };
    Corolla.prototype.registerFloatingPetal = function (petal) {
        var floatingPetal = petal;
        floatingPetal.center = { x: this.position.x, y: this.position.y };
        floatingPetal.petalArea = floatingPetal.width * floatingPetal.height;
        floatingPetal.rotationSpeed = noise_1.Noise.randomInRange(-1.5, 1.5);
        this.floatingPetals.push(floatingPetal);
    };
    Corolla.prototype.computePetals = function (nbPetals) {
        var result = [];
        for (var i = 0; i < nbPetals; i++) {
            var width = noise_1.Noise.randomInRange(50, 70);
            var proportions = noise_1.Noise.randomInRange(0.3, 0.7);
            var height = proportions * width;
            var orientation_1 = noise_1.Noise.randomInRange(0, 2 * Math.PI);
            result.push({
                width: width,
                height: height,
                orientation: orientation_1,
                center: this.position,
            });
        }
        return result;
    };
    Corolla.computeOutline = function (outlineNbPoints, outlineRadius) {
        var result = [];
        for (var i = 0; i < outlineNbPoints; i++) {
            var angle = 2 * Math.PI * i / (outlineNbPoints - 1);
            var radius = outlineRadius * noise_1.Noise.randomInRange(1, 1.3);
            result.push({
                x: radius * Math.cos(angle),
                y: radius * Math.sin(angle),
            });
        }
        return result;
    };
    return Corolla;
}());
exports.Corolla = Corolla;


/***/ }),

/***/ "./src/ts/flower.ts":
/*!**************************!*\
  !*** ./src/ts/flower.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Flower = void 0;
var corolla_1 = __webpack_require__(/*! ./corolla */ "./src/ts/corolla.ts");
var parameters_1 = __webpack_require__(/*! ./parameters */ "./src/ts/parameters.ts");
var rope_1 = __webpack_require__(/*! ./rope */ "./src/ts/rope.ts");
var Flower = (function () {
    function Flower(attachPoint, length) {
        this.attachPoint = attachPoint;
        var nbNodes = Math.max(length / Flower.maxSegmentLength);
        this.stem = new rope_1.Rope(attachPoint, length / nbNodes, nbNodes);
        this.corolla = new corolla_1.Corolla();
        this.attachCorolla();
    }
    Flower.prototype.update = function (dt, forceField) {
        this.corolla.update(dt);
        var corollaAcceleration = this.corolla.getAcceleration(forceField);
        this.stem.dampening = parameters_1.Parameters.dampening;
        this.stem.update(dt, this.attachPoint, corollaAcceleration);
        this.attachCorolla();
    };
    Flower.prototype.getDrawableStem = function () {
        return this.stem.getDrawableLine(5);
    };
    Flower.prototype.drawCorolla = function (plotter) {
        this.corolla.draw(plotter);
    };
    Flower.prototype.isDead = function (lowestAllowed) {
        return this.corolla.isDead(lowestAllowed) && this.stem.highestPoint >= lowestAllowed;
    };
    Flower.prototype.resetPetalColors = function () {
        this.corolla.resetPetalColors();
    };
    Flower.prototype.attachCorolla = function () {
        this.corolla.position.x = this.stem.endPosition.x;
        this.corolla.position.y = this.stem.endPosition.y;
    };
    Flower.maxSegmentLength = 20;
    return Flower;
}());
exports.Flower = Flower;


/***/ }),

/***/ "./src/ts/flowers-manager.ts":
/*!***********************************!*\
  !*** ./src/ts/flowers-manager.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowersManager = void 0;
var flower_1 = __webpack_require__(/*! ./flower */ "./src/ts/flower.ts");
var noise_1 = __webpack_require__(/*! ./noise */ "./src/ts/noise.ts");
var parameters_1 = __webpack_require__(/*! ./parameters */ "./src/ts/parameters.ts");
var FlowersManager = (function () {
    function FlowersManager() {
        this.flowers = [];
    }
    FlowersManager.prototype.reset = function () {
        this.flowers.length = 0;
    };
    FlowersManager.prototype.manage = function (domainWidth, domainHeight) {
        var idealNumberOfFlowers = Math.round(domainWidth * parameters_1.Parameters.flowersDensity);
        if (idealNumberOfFlowers <= 0) {
            idealNumberOfFlowers = 1;
        }
        while (this.flowers.length < idealNumberOfFlowers) {
            var newFlower = FlowersManager.createFlower(domainWidth, domainHeight);
            this.flowers.push(newFlower);
        }
        for (var iF = this.flowers.length - 1; iF >= 0; iF--) {
            if (this.flowers[iF].isDead(domainHeight)) {
                if (this.flowers.length > idealNumberOfFlowers) {
                    this.flowers.splice(iF, 1);
                    iF--;
                }
                else {
                    this.flowers[iF] = FlowersManager.createFlower(domainWidth, domainHeight);
                }
            }
        }
    };
    FlowersManager.prototype.update = function (dt, forceField) {
        for (var _i = 0, _a = this.flowers; _i < _a.length; _i++) {
            var flower = _a[_i];
            flower.update(dt, forceField);
        }
    };
    FlowersManager.prototype.draw = function (plotter) {
        var stems = [];
        for (var _i = 0, _a = this.flowers; _i < _a.length; _i++) {
            var flower = _a[_i];
            stems.push(flower.getDrawableStem());
        }
        plotter.drawLines(stems, parameters_1.Parameters.linesColor);
        for (var _b = 0, _c = this.flowers; _b < _c.length; _b++) {
            var flower = _c[_b];
            flower.drawCorolla(plotter);
        }
    };
    FlowersManager.prototype.resetPetalColors = function () {
        for (var _i = 0, _a = this.flowers; _i < _a.length; _i++) {
            var flower = _a[_i];
            flower.resetPetalColors();
        }
    };
    FlowersManager.createFlower = function (domainWidth, domainHeight) {
        var attachPoint = {
            x: domainWidth * Math.random(),
            y: domainHeight,
        };
        var flowerLength = noise_1.Noise.randomInRange(0.2, 0.8) * domainHeight;
        return new flower_1.Flower(attachPoint, flowerLength);
    };
    return FlowersManager;
}());
exports.FlowersManager = FlowersManager;


/***/ }),

/***/ "./src/ts/force-field.ts":
/*!*******************************!*\
  !*** ./src/ts/force-field.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForceField = void 0;
var parameters_1 = __webpack_require__(/*! ./parameters */ "./src/ts/parameters.ts");
var ForceField = (function () {
    function ForceField(mousePosition, maxInfluenceDistance) {
        this.mousePosition = mousePosition;
        this.maxInfluenceDistance = maxInfluenceDistance;
        this.fleeMouseEnabled = parameters_1.Parameters.fleeMouse;
    }
    ForceField.prototype.computeForce = function (location) {
        if (!this.fleeMouseEnabled) {
            return { x: 0, y: 0 };
        }
        var fromMouseX = location.x - this.mousePosition.x;
        var fromMouseY = location.y - this.mousePosition.y;
        var distanceToMouse = Math.sqrt(fromMouseX * fromMouseX + fromMouseY * fromMouseY);
        if (distanceToMouse > this.maxInfluenceDistance) {
            return { x: 0, y: 0 };
        }
        var mouseInfluence = 0.5 + Math.cos(Math.PI * distanceToMouse / this.maxInfluenceDistance);
        return {
            x: mouseInfluence * mouseInfluence * fromMouseX / distanceToMouse,
            y: mouseInfluence * mouseInfluence * fromMouseY / distanceToMouse,
        };
    };
    return ForceField;
}());
exports.ForceField = ForceField;


/***/ }),

/***/ "./src/ts/gl-utils/gl-canvas.ts":
/*!**************************************!*\
  !*** ./src/ts/gl-utils/gl-canvas.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gl = exports.initGL = exports.adjustSize = void 0;
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
var gl = null;
exports.gl = gl;
function initGL(flags) {
    function setError(message) {
        Page.Demopage.setErrorMessage("webgl-support", message);
    }
    var canvas = Page.Canvas.getCanvas();
    exports.gl = gl = canvas.getContext("webgl", flags);
    if (gl == null) {
        exports.gl = gl = canvas.getContext("experimental-webgl", flags);
        if (gl == null) {
            setError("Your browser or device does not seem to support WebGL.");
            return false;
        }
        setError("Your browser or device only supports experimental WebGL.\nThe simulation may not run as expected.");
    }
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.BLEND);
    gl.clearColor(0, 0, 0, 1);
    return true;
}
exports.initGL = initGL;
function adjustSize(hidpi) {
    if (hidpi === void 0) { hidpi = false; }
    var cssPixel = (hidpi) ? window.devicePixelRatio : 1;
    var canvas = gl.canvas;
    var width = Math.floor(canvas.clientWidth * cssPixel);
    var height = Math.floor(canvas.clientHeight * cssPixel);
    if (canvas.width !== width || canvas.height !== height) {
        canvas.width = width;
        canvas.height = height;
    }
}
exports.adjustSize = adjustSize;


/***/ }),

/***/ "./src/ts/helpers.ts":
/*!***************************!*\
  !*** ./src/ts/helpers.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.downloadTextFile = void 0;
function downloadTextFile(fileName, content) {
    var fileType = "text/plain";
    var blob = new Blob([content], { type: fileType });
    if (typeof window.navigator !== "undefined" && typeof window.navigator.msSaveBlob !== "undefined") {
        window.navigator.msSaveBlob(blob, fileName);
    }
    else {
        var objectUrl_1 = URL.createObjectURL(blob);
        var linkElement = document.createElement('a');
        linkElement.download = fileName;
        linkElement.href = objectUrl_1;
        linkElement.dataset.downloadurl = fileType + ":" + linkElement.download + ":" + linkElement.href;
        linkElement.style.display = "none";
        document.body.appendChild(linkElement);
        linkElement.click();
        document.body.removeChild(linkElement);
        setTimeout(function () {
            URL.revokeObjectURL(objectUrl_1);
        }, 5000);
    }
}
exports.downloadTextFile = downloadTextFile;


/***/ }),

/***/ "./src/ts/noise.ts":
/*!*************************!*\
  !*** ./src/ts/noise.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Noise = void 0;
var Noise = (function () {
    function Noise(period) {
        this.period = period;
        this.time = 0;
        this.last = { x: 0, y: 0 };
        this.next = { x: 0, y: 0 };
        this.last = Noise.randomVector();
        this.next = Noise.randomVector();
    }
    Noise.prototype.compute = function (dt) {
        this.time += dt;
        if (this.time > this.period) {
            this.last = this.next;
            this.next = Noise.randomVector();
            this.time = this.time % this.period;
        }
        var r = this.time / this.period;
        return {
            x: this.last.x * (1 - r) + this.next.x * r,
            y: this.last.y * (1 - r) + this.next.y * r,
        };
    };
    Noise.randomInRange = function (from, to) {
        return from + (to - from) * Math.random();
    };
    Noise.randomVector = function () {
        return { x: Math.random(), y: Math.random() };
    };
    return Noise;
}());
exports.Noise = Noise;


/***/ }),

/***/ "./src/ts/page-interface-generated.ts":
/*!********************************************!*\
  !*** ./src/ts/page-interface-generated.ts ***!
  \********************************************/
/***/ (function() {




/***/ }),

/***/ "./src/ts/parameters.ts":
/*!******************************!*\
  !*** ./src/ts/parameters.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parameters = void 0;
__webpack_require__(/*! ./page-interface-generated */ "./src/ts/page-interface-generated.ts");
var controlId = {
    FLOWERS_RANGE: "flowers-range-id",
    WIND_RANGE: "wind-range-id",
    SPEED_RANGE: "speed-range-id",
    DAMPENING_RANGE: "dampening-range-id",
    FLEE_MOUSE_CHECKBOX: "flee-mouse-checkbox-id",
    RESET_BUTTON: "reset-button-id",
    BACKGROUND_COLORPICKER: "background-color-id",
    LINES_COLORPICKER: "lines-color-id",
    SINGLE_PETAL_COLOR_CHECKBOX: "single-petal-color-checkbox-id",
    PETAL_COLORPICKER: "petal-color-id",
    DOWNLOAD_BUTTON: "download-button-id",
};
function callObservers(observers) {
    for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {
        var observer = observers_1[_i];
        observer();
    }
}
var resetObservers = [];
var downloadObservers = [];
var petalColorChangeObservers = [];
var Parameters = (function () {
    function Parameters() {
    }
    Object.defineProperty(Parameters, "mousePositionInPixels", {
        get: function () {
            var mousePosition = Page.Canvas.getMousePosition();
            if (mousePosition.length === 2) {
                var canvasSize = Page.Canvas.getSize();
                return {
                    x: canvasSize[0] * mousePosition[0],
                    y: canvasSize[1] * mousePosition[1],
                };
            }
            else {
                return { x: 0, y: 0 };
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "flowersDensity", {
        get: function () {
            return Page.Range.getValue(controlId.FLOWERS_RANGE) * 0.25;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "wind", {
        get: function () {
            return Page.Range.getValue(controlId.WIND_RANGE);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "speed", {
        get: function () {
            return Page.Range.getValue(controlId.SPEED_RANGE);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "dampening", {
        get: function () {
            return 1 - 0.01 * Page.Range.getValue(controlId.DAMPENING_RANGE);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "fleeMouse", {
        get: function () {
            return Page.Checkbox.isChecked(controlId.FLEE_MOUSE_CHECKBOX);
        },
        enumerable: false,
        configurable: true
    });
    Parameters.addResetObserver = function (observer) {
        resetObservers.push(observer);
    };
    Object.defineProperty(Parameters, "backgroundColor", {
        get: function () {
            return Page.ColorPicker.getValueHex(controlId.BACKGROUND_COLORPICKER);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "linesColor", {
        get: function () {
            return Page.ColorPicker.getValueHex(controlId.LINES_COLORPICKER);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "singlePetalColor", {
        get: function () {
            return Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Parameters, "petalColor", {
        get: function () {
            return Page.ColorPicker.getValue(controlId.PETAL_COLORPICKER);
        },
        enumerable: false,
        configurable: true
    });
    Parameters.addPetalColorChange = function (observer) {
        petalColorChangeObservers.push(observer);
    };
    Parameters.addDownloadObserver = function (observer) {
        downloadObservers.push(observer);
    };
    return Parameters;
}());
exports.Parameters = Parameters;
function updatePetalColorsVisibility() {
    var visible = Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);
    Page.Controls.setVisibility(controlId.PETAL_COLORPICKER, visible);
}
Page.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, updatePetalColorsVisibility);
updatePetalColorsVisibility();
Page.Button.addObserver(controlId.RESET_BUTTON, function () {
    callObservers(resetObservers);
});
Page.Button.addObserver(controlId.DOWNLOAD_BUTTON, function () {
    callObservers(downloadObservers);
});
Page.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, function () {
    callObservers(petalColorChangeObservers);
});
Page.ColorPicker.addObserver(controlId.PETAL_COLORPICKER, function () {
    if (Parameters.singlePetalColor) {
        callObservers(petalColorChangeObservers);
    }
});


/***/ }),

/***/ "./src/ts/plotting/plotter-canvas-2d.ts":
/*!**********************************************!*\
  !*** ./src/ts/plotting/plotter-canvas-2d.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlotterCanvas2D = void 0;
var plotter_canvas_base_1 = __webpack_require__(/*! ./plotter-canvas-base */ "./src/ts/plotting/plotter-canvas-base.ts");
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
function ellipsePolyfill(centerX, centerY, radiusX, radiusY) {
    this.arc(centerX, centerY, Math.max(radiusX, radiusY), 0, 2 * Math.PI);
}
var PlotterCanvas2D = (function (_super) {
    __extends(PlotterCanvas2D, _super);
    function PlotterCanvas2D() {
        var _this = _super.call(this) || this;
        _this.context = _this.canvas.getContext("2d", { alpha: false });
        return _this;
    }
    PlotterCanvas2D.prototype.initialize = function (backgroundColor) {
        this.context.fillStyle = backgroundColor;
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };
    PlotterCanvas2D.prototype.finalize = function () { };
    PlotterCanvas2D.prototype.drawLines = function (lines, color) {
        if (lines.length >= 1) {
            this.context.strokeStyle = color;
            this.context.lineWidth = 1;
            this.context.beginPath();
            for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                var line = lines_1[_i];
                if (line.length >= 2) {
                    this.context.moveTo(line[0].x * this.cssPixel, line[0].y * this.cssPixel);
                    for (var iP = 1; iP < line.length; iP++) {
                        this.context.lineTo(line[iP].x * this.cssPixel, line[iP].y * this.cssPixel);
                    }
                }
            }
            this.context.stroke();
            this.context.closePath();
        }
    };
    PlotterCanvas2D.prototype.drawPolygon = function (polygon, offset, strokeColor, fillColor) {
        if (polygon.length >= 2) {
            this.context.strokeStyle = strokeColor;
            this.context.fillStyle = fillColor;
            this.context.lineWidth = 1;
            this.context.beginPath();
            this.context.moveTo((polygon[0].x + offset.x) * this.cssPixel, (polygon[0].y + offset.y) * this.cssPixel);
            for (var iP = 1; iP < polygon.length; iP++) {
                this.context.lineTo((polygon[iP].x + offset.x) * this.cssPixel, (polygon[iP].y + offset.y) * this.cssPixel);
            }
            this.context.closePath();
            this.context.fill();
            this.context.stroke();
        }
    };
    PlotterCanvas2D.prototype.drawEllipsis = function (ellipsis, color) {
        this.context.fillStyle = color;
        if (typeof this.context.ellipse !== "function") {
            this.context.ellipse = ellipsePolyfill;
        }
        for (var _i = 0, ellipsis_1 = ellipsis; _i < ellipsis_1.length; _i++) {
            var ellipse = ellipsis_1[_i];
            this.context.beginPath();
            this.context.ellipse(ellipse.center.x * this.cssPixel, ellipse.center.y * this.cssPixel, 0.5 * ellipse.width * this.cssPixel, 0.5 * ellipse.height * this.cssPixel, ellipse.orientation, 0, 2 * Math.PI);
            this.context.fill();
            this.context.closePath();
        }
    };
    return PlotterCanvas2D;
}(plotter_canvas_base_1.PlotterCanvas));
exports.PlotterCanvas2D = PlotterCanvas2D;


/***/ }),

/***/ "./src/ts/plotting/plotter-canvas-base.ts":
/*!************************************************!*\
  !*** ./src/ts/plotting/plotter-canvas-base.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlotterCanvas = void 0;
var plotter_1 = __webpack_require__(/*! ./plotter */ "./src/ts/plotting/plotter.ts");
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
var PlotterCanvas = (function (_super) {
    __extends(PlotterCanvas, _super);
    function PlotterCanvas() {
        var _a;
        var _this = _super.call(this) || this;
        _this.canvas = Page.Canvas.getCanvas();
        _this.cssPixel = (_a = window.devicePixelRatio) !== null && _a !== void 0 ? _a : 1;
        _this.adjustToCanvas();
        return _this;
    }
    PlotterCanvas.prototype.adjustToCanvas = function () {
        var actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);
        var actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);
        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {
            this.canvas.width = actualWidth;
            this.canvas.height = actualHeight;
        }
        this._width = this.canvas.clientWidth;
        this._height = this.canvas.clientHeight;
    };
    Object.defineProperty(PlotterCanvas.prototype, "width", {
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlotterCanvas.prototype, "height", {
        get: function () {
            return this._height;
        },
        enumerable: false,
        configurable: true
    });
    return PlotterCanvas;
}(plotter_1.Plotter));
exports.PlotterCanvas = PlotterCanvas;


/***/ }),

/***/ "./src/ts/plotting/plotter-canvas-webgl.ts":
/*!*************************************************!*\
  !*** ./src/ts/plotting/plotter-canvas-webgl.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlotterCanvasWebGL = void 0;
var plotter_canvas_base_1 = __webpack_require__(/*! ./plotter-canvas-base */ "./src/ts/plotting/plotter-canvas-base.ts");
var gl_canvas_1 = __webpack_require__(/*! ../gl-utils/gl-canvas */ "./src/ts/gl-utils/gl-canvas.ts");
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
var PlotterCanvasWebGL = (function (_super) {
    __extends(PlotterCanvasWebGL, _super);
    function PlotterCanvasWebGL() {
        var _this = _super.call(this) || this;
        if (!gl_canvas_1.initGL()) {
            throw new Error("Failed to initialize WebGL.");
        }
        return _this;
    }
    PlotterCanvasWebGL.prototype.initialize = function (backgroundColor) {
        var redHex = backgroundColor.substring(1, 3);
        var greenHex = backgroundColor.substring(3, 5);
        var blueHex = backgroundColor.substring(5, 7);
        var r = parseInt(redHex, 16);
        var g = parseInt(greenHex, 16);
        var b = parseInt(blueHex, 16);
        gl_canvas_1.gl.clearColor(r / 255, g / 255, b / 255, 1);
        gl_canvas_1.gl.clear(gl_canvas_1.gl.COLOR_BUFFER_BIT);
    };
    PlotterCanvasWebGL.prototype.finalize = function () { };
    PlotterCanvasWebGL.prototype.drawLines = function (lines, color) {
    };
    PlotterCanvasWebGL.prototype.drawPolygon = function (polygon, offset, strokeColor, fillColor) {
    };
    PlotterCanvasWebGL.prototype.drawEllipsis = function (ellipsis, color) {
    };
    return PlotterCanvasWebGL;
}(plotter_canvas_base_1.PlotterCanvas));
exports.PlotterCanvasWebGL = PlotterCanvasWebGL;


/***/ }),

/***/ "./src/ts/plotting/plotter-svg.ts":
/*!****************************************!*\
  !*** ./src/ts/plotting/plotter-svg.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlotterSvg = void 0;
var plotter_1 = __webpack_require__(/*! ./plotter */ "./src/ts/plotting/plotter.ts");
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
function radianToDegree(radian) {
    return 180 * radian / Math.PI;
}
var PlotterSvg = (function (_super) {
    __extends(PlotterSvg, _super);
    function PlotterSvg(width, height) {
        var _this = _super.call(this) || this;
        _this.stringParts = [];
        _this.width = width;
        _this.height = height;
        return _this;
    }
    PlotterSvg.prototype.initialize = function (backgroundColor) {
        this.stringParts.push("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
        this.stringParts.push("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 " + this.width + " " + this.height + "\">");
        this.stringParts.push("\t<rect fill=\"" + backgroundColor + "\" stroke=\"none\" x=\"0\" y=\"0\" width=\"" + this.width + "\" height=\"" + this.height + "\"/>");
    };
    PlotterSvg.prototype.finalize = function () {
        this.stringParts.push("</svg>");
    };
    PlotterSvg.prototype.toString = function () {
        return this.stringParts.join("\n");
    };
    PlotterSvg.prototype.drawLines = function (lines, color) {
        if (lines.length >= 1) {
            this.stringParts.push("\t<g stroke=\"" + color + "\" stroke-width=\"1\" fill=\"none\">");
            for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                var line = lines_1[_i];
                if (line.length >= 2) {
                    this.stringParts.push("\t\t<path d=\"" + this.computePath(line) + "\"/>");
                }
            }
            this.stringParts.push("\t</g>");
        }
    };
    PlotterSvg.prototype.drawPolygon = function (polygon, offset, strokeColor, fillColor) {
        if (polygon.length >= 2) {
            var transform = "translate(" + offset.x.toFixed(1) + " " + offset.y.toFixed(1) + ")";
            this.stringParts.push("\t<path d=\"" + this.computePath(polygon) + "Z\" stroke=\"" + strokeColor + "\" stroke-width=\"1\" fill=\"" + fillColor + "\" transform=\"" + transform + "\"/>");
        }
    };
    PlotterSvg.prototype.drawEllipsis = function (ellipsis, color) {
        if (ellipsis.length >= 1) {
            this.stringParts.push("\t<g stroke=\"none\" fill=\"" + color + "\">");
            for (var _i = 0, ellipsis_1 = ellipsis; _i < ellipsis_1.length; _i++) {
                var ellipse = ellipsis_1[_i];
                var transform = "translate(" + ellipse.center.x.toFixed(1) + " " + ellipse.center.y.toFixed(1) + ") rotate(" + radianToDegree(ellipse.orientation).toFixed(1) + ")";
                this.stringParts.push("\t\t<ellipse cx=\"0\" cy=\"0\" rx=\"" + (0.5 * ellipse.width).toFixed(1) + "\" ry=\"" + (0.5 * ellipse.height).toFixed(1) + "\" transform=\"" + transform + "\"/>");
            }
            this.stringParts.push("\t</g>");
        }
    };
    PlotterSvg.prototype.computePath = function (line) {
        var start = "M" + line[0].x.toFixed(1) + "," + line[0].y.toFixed(1) + "L";
        var pathParts = [];
        for (var iP = 1; iP < line.length; iP++) {
            pathParts.push(line[iP].x.toFixed(1) + "," + line[iP].y.toFixed(1));
        }
        return start + pathParts.join(" ");
    };
    return PlotterSvg;
}(plotter_1.Plotter));
exports.PlotterSvg = PlotterSvg;


/***/ }),

/***/ "./src/ts/plotting/plotter.ts":
/*!************************************!*\
  !*** ./src/ts/plotting/plotter.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Plotter = void 0;
__webpack_require__(/*! ../page-interface-generated */ "./src/ts/page-interface-generated.ts");
var Plotter = (function () {
    function Plotter() {
    }
    return Plotter;
}());
exports.Plotter = Plotter;


/***/ }),

/***/ "./src/ts/rope.ts":
/*!************************!*\
  !*** ./src/ts/rope.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rope = void 0;
function createRopeNode(x, y) {
    return {
        pos: { x: x, y: y },
        previousPos: { x: x, y: y },
        acc: { x: 0, y: 0 },
    };
}
var NB_ITERATIONS = 8;
var Rope = (function () {
    function Rope(startingPoint, segmentLength, nbNodes) {
        this.dampening = 1;
        this.segmentLength = segmentLength;
        this.totalLength = segmentLength * nbNodes;
        this.nodes = [];
        this.nodes.push(createRopeNode(startingPoint.x, startingPoint.y));
        for (var iN = 0; iN < nbNodes; iN++) {
            var angle = 2 * Math.PI * Math.random();
            this.nodes.push(createRopeNode(this.nodes[this.nodes.length - 1].pos.x + segmentLength * Math.cos(angle), this.nodes[this.nodes.length - 1].pos.y + Math.abs(segmentLength * Math.sin(angle))));
        }
    }
    Rope.prototype.getDrawableLine = function (minSegmentLength) {
        return this.computeSmoothLine(this.totalLength / minSegmentLength);
    };
    Rope.prototype.update = function (dt, origin, endAcceleration) {
        this.applyForces(endAcceleration);
        this.applyVerlet(dt);
        for (var i = 0; i < NB_ITERATIONS; i++) {
            this.applyConstraints(origin);
        }
    };
    Object.defineProperty(Rope.prototype, "endPosition", {
        get: function () {
            return this.nodes[this.nodes.length - 1].pos;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rope.prototype, "highestPoint", {
        get: function () {
            var highest = 1000000;
            for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
                var node = _a[_i];
                if (node.pos.y < highest) {
                    highest = node.pos.y;
                }
            }
            return highest;
        },
        enumerable: false,
        configurable: true
    });
    Rope.prototype.applyForces = function (endAcceleration) {
        for (var iN = 1; iN < this.nodes.length; iN++) {
            this.nodes[iN].acc.x = 0;
            this.nodes[iN].acc.y = 0;
        }
        this.nodes[this.nodes.length - 1].acc.x += endAcceleration.x;
        this.nodes[this.nodes.length - 1].acc.y += endAcceleration.y;
    };
    Rope.prototype.applyVerlet = function (dt) {
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var node = _a[_i];
            var newPosX = node.pos.x + this.dampening * (node.pos.x - node.previousPos.x) + dt * dt * node.acc.x;
            var newPosY = node.pos.y + this.dampening * (node.pos.y - node.previousPos.y) + dt * dt * node.acc.y;
            node.previousPos.x = node.pos.x;
            node.previousPos.y = node.pos.y;
            node.pos.x = newPosX;
            node.pos.y = newPosY;
        }
    };
    Rope.prototype.applyConstraints = function (origin) {
        var EPSILON = 0.000001;
        this.nodes[0].pos.x = origin.x;
        this.nodes[0].pos.y = origin.y;
        for (var iN = 1; iN < this.nodes.length; iN++) {
            var dX = this.nodes[iN].pos.x - this.nodes[iN - 1].pos.x;
            var dY = this.nodes[iN].pos.y - this.nodes[iN - 1].pos.y;
            var distanceToPrevious = Math.sqrt(dX * dX + dY * dY);
            var correction = 0.5 * (1 - this.segmentLength / (distanceToPrevious + EPSILON));
            var correctionX = dX * correction;
            var correctionY = dY * correction;
            this.nodes[iN].pos.x -= correctionX;
            this.nodes[iN].pos.y -= correctionY;
            this.nodes[iN - 1].pos.x += correctionX;
            this.nodes[iN - 1].pos.y += correctionY;
        }
    };
    Rope.prototype.computeSmoothLine = function (minimumPoints) {
        var points = [];
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var node = _a[_i];
            points.push(node.pos);
        }
        while (points.length < minimumPoints) {
            points = Rope.subdivideLine(points, 0.333);
        }
        return points;
    };
    Rope.subdivideLine = function (sourcePoints, ratio) {
        var newPoints = [];
        newPoints.push(sourcePoints[0]);
        for (var iP = 0; iP < sourcePoints.length - 1; iP++) {
            newPoints.push({
                x: sourcePoints[iP].x * (1 - ratio) + sourcePoints[iP + 1].x * ratio,
                y: sourcePoints[iP].y * (1 - ratio) + sourcePoints[iP + 1].y * ratio,
            });
            newPoints.push({
                x: sourcePoints[iP].x * ratio + sourcePoints[iP + 1].x * (1 - ratio),
                y: sourcePoints[iP].y * ratio + sourcePoints[iP + 1].y * (1 - ratio),
            });
        }
        newPoints.push(sourcePoints[sourcePoints.length - 1]);
        return newPoints;
    };
    return Rope;
}());
exports.Rope = Rope;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
var exports = __webpack_exports__;
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var flowers_manager_1 = __webpack_require__(/*! ./flowers-manager */ "./src/ts/flowers-manager.ts");
var force_field_1 = __webpack_require__(/*! ./force-field */ "./src/ts/force-field.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "./src/ts/helpers.ts");
var parameters_1 = __webpack_require__(/*! ./parameters */ "./src/ts/parameters.ts");
var plotter_canvas_2d_1 = __webpack_require__(/*! ./plotting/plotter-canvas-2d */ "./src/ts/plotting/plotter-canvas-2d.ts");
var plotter_svg_1 = __webpack_require__(/*! ./plotting/plotter-svg */ "./src/ts/plotting/plotter-svg.ts");
__webpack_require__(/*! ./page-interface-generated */ "./src/ts/page-interface-generated.ts");
var plotter_canvas_webgl_1 = __webpack_require__(/*! ./plotting/plotter-canvas-webgl */ "./src/ts/plotting/plotter-canvas-webgl.ts");
function plot(flowersManager, plotter) {
    plotter.initialize(parameters_1.Parameters.backgroundColor);
    flowersManager.draw(plotter);
    plotter.finalize();
}
function main() {
    var plotter = new plotter_canvas_webgl_1.PlotterCanvasWebGL() || new plotter_canvas_2d_1.PlotterCanvas2D();
    var flowersManager = new flowers_manager_1.FlowersManager();
    parameters_1.Parameters.addResetObserver(function () { flowersManager.reset(); });
    parameters_1.Parameters.addDownloadObserver(function () { exportAsSvg(flowersManager, plotter.width, plotter.height); });
    parameters_1.Parameters.addPetalColorChange(function () { flowersManager.resetPetalColors(); });
    var maxDt = 1 / 60;
    var lastUpdate = performance.now();
    function mainLoop() {
        var now = performance.now();
        var dt = parameters_1.Parameters.speed * Math.min(maxDt, 0.001 * (now - lastUpdate));
        lastUpdate = now;
        plotter.adjustToCanvas();
        flowersManager.manage(plotter.width, plotter.height);
        var forceField = new force_field_1.ForceField(parameters_1.Parameters.mousePositionInPixels, 500);
        flowersManager.update(dt, forceField);
        plot(flowersManager, plotter);
        requestAnimationFrame(mainLoop);
    }
    requestAnimationFrame(mainLoop);
}
function exportAsSvg(flowersManager, width, height) {
    var plotter = new plotter_svg_1.PlotterSvg(width, height);
    plot(flowersManager, plotter);
    var svgText = plotter.toString();
    helpers_1.downloadTextFile("flowers.svg", svgText);
}
main();

}();
/******/ })()
;
//# sourceMappingURL=main.min.js.map