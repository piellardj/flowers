{"version":3,"sources":["webpack://flowers/./src/ts/corolla.ts","webpack://flowers/./src/ts/flower.ts","webpack://flowers/./src/ts/flowers-manager.ts","webpack://flowers/./src/ts/force-field.ts","webpack://flowers/./src/ts/gl-utils/gl-canvas.ts","webpack://flowers/./src/ts/gl-utils/gl-resource.ts","webpack://flowers/./src/ts/gl-utils/shader-manager.ts","webpack://flowers/./src/ts/gl-utils/shader-sources.ts","webpack://flowers/./src/ts/gl-utils/shader.ts","webpack://flowers/./src/ts/helpers.ts","webpack://flowers/./src/ts/noise.ts","webpack://flowers/./src/ts/parameters.ts","webpack://flowers/./src/ts/plotting/color.ts","webpack://flowers/./src/ts/plotting/plotter-canvas-2d.ts","webpack://flowers/./src/ts/plotting/plotter-canvas-base.ts","webpack://flowers/./src/ts/plotting/plotter-canvas-webgl.ts","webpack://flowers/./src/ts/plotting/plotter-svg.ts","webpack://flowers/./src/ts/plotting/plotter.ts","webpack://flowers/./src/ts/rope.ts","webpack://flowers/webpack/bootstrap","webpack://flowers/./src/ts/main.ts"],"names":[],"mappings":"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","file":"main.min.js","sourcesContent":["import { ForceField } from \"./force-field\";\r\nimport { IEllipse, IPoint, IVector } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Color } from \"./plotting/color\";\r\nimport { Plotter } from \"./plotting/plotter\";\r\n\r\ninterface IPetal extends IEllipse {\r\n    petalArea: number;\r\n    rotationSpeed: number;\r\n}\r\n\r\nfunction randomColor(): Color {\r\n    const random = Noise.randomInRange(0, 3);\r\n    const randomChannel = Math.floor(0.5 * 255 * (random % 1));\r\n\r\n    if (random < 1) {\r\n        return new Color(255, 0, 255 - randomChannel);\r\n    } else if (random < 2) {\r\n        return new Color(255, randomChannel, 0);\r\n    } else if (random < 3) {\r\n        return new Color(255 - randomChannel, 255, 0);\r\n    } else if (random < 4) {\r\n        return new Color(0, 255, randomChannel);\r\n    } else if (random < 5) {\r\n        return new Color(0, 255 - randomChannel, 255);\r\n    } else {\r\n        return new Color(randomChannel, 0, 255);\r\n    }\r\n}\r\n\r\nconst PETALS_DROP_RATE = 0.1;\r\n\r\nclass Corolla {\r\n    public readonly position: IPoint; // readonly because attachedPetals reference it\r\n\r\n    private readonly color: Color;\r\n    private readonly attachedPetals: IPetal[];\r\n    private readonly floatingPetals: IPetal[];\r\n    private readonly outline: IPoint[];\r\n\r\n    private readonly noise: Noise;\r\n    private wind: IVector;\r\n\r\n    public constructor() {\r\n        this.position = { x: 0, y: 0 };\r\n        this.color = randomColor();\r\n        this.attachedPetals = this.computePetals(10);\r\n        this.floatingPetals = [];\r\n        this.outline = Corolla.computeOutline(40, 20);\r\n\r\n        this.noise = new Noise(Noise.randomInRange(1, 2));\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        if (this.attachedPetals.length > 0 && Math.random() < PETALS_DROP_RATE * dt) {\r\n            const detachedPetal = this.attachedPetals.pop();\r\n            detachedPetal.center = { x: this.position.x, y: this.position.y };\r\n            detachedPetal.rotationSpeed = Noise.randomInRange(-1.5, 1.5);\r\n            this.floatingPetals.push(detachedPetal);\r\n        }\r\n\r\n        for (const detachedPetal of this.floatingPetals) {\r\n            detachedPetal.center.y -= 0.05 * detachedPetal.petalArea * dt;\r\n            detachedPetal.orientation += detachedPetal.rotationSpeed * dt;\r\n        }\r\n        this.trimFloatingPetals();\r\n\r\n        this.wind = this.noise.compute(dt);\r\n        this.wind.x = Parameters.wind * 10000 * (this.wind.x - 0.5);\r\n        this.wind.y = 1000 * (this.wind.y - 0.5);\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        this.drawOutline(plotter);\r\n        this.drawPetals(plotter);\r\n    }\r\n\r\n    public getAcceleration(forceField: ForceField): IVector {\r\n        const acceleration: IVector = { x: 0, y: 0 };\r\n        acceleration.x += this.wind.x * Math.min(1, this.attachedPetals.length / 16);\r\n        acceleration.y += this.wind.y;\r\n\r\n        const DOWNWARD_FORCE = 10000;\r\n        const UPWARD_FORCE = [7000, 10000, 11000, 12000];\r\n        acceleration.y += DOWNWARD_FORCE - UPWARD_FORCE[Math.min(UPWARD_FORCE.length - 1, this.attachedPetals.length)];\r\n\r\n        const fieldForce = forceField.computeForce(this.position);\r\n        acceleration.x += 2000 * fieldForce.x;\r\n        acceleration.y += 2000 * fieldForce.y;\r\n\r\n        return acceleration;\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        return this.attachedPetals.length <= 0 && this.floatingPetals.length <= 0 && this.position.y > lowestAllowed + 50;\r\n    }\r\n\r\n    private drawPetals(plotter: Plotter): void {\r\n        const allPetals = this.attachedPetals.concat(this.floatingPetals);\r\n        const color = Parameters.singlePetalColor ? Parameters.petalColor : this.color;\r\n        plotter.drawEllipses(allPetals, color);\r\n    }\r\n\r\n    private drawOutline(plotter: Plotter): void {\r\n        plotter.drawPolygon(this.outline, this.position);\r\n    }\r\n\r\n    private trimFloatingPetals(): void {\r\n        for (let iP = this.floatingPetals.length - 1; iP >= 0; iP--) {\r\n            const highestPoint = this.floatingPetals[iP].center.y + 0.5 * Math.max(this.floatingPetals[iP].width, this.floatingPetals[iP].height);\r\n            if (highestPoint < 0) {\r\n                this.floatingPetals.splice(iP, 1);\r\n                iP--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private computePetals(nbPetals: number): IPetal[] {\r\n        const result: IPetal[] = [];\r\n\r\n        for (let i = 0; i < nbPetals; i++) {\r\n            const width = Noise.randomInRange(50, 70);\r\n            const proportions = Noise.randomInRange(0.3, 0.7);\r\n            const height = proportions * width;\r\n            const orientation = Noise.randomInRange(0, 2 * Math.PI);\r\n\r\n            result.push({\r\n                width,\r\n                height,\r\n                orientation,\r\n                center: this.position,\r\n                petalArea: width * height,\r\n                rotationSpeed: 0,\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static computeOutline(outlineNbPoints: number, outlineRadius: number): IPoint[] {\r\n        const result: IPoint[] = [];\r\n\r\n        for (let i = 0; i < outlineNbPoints; i++) {\r\n            const angle = 2 * Math.PI * i / (outlineNbPoints - 1);\r\n            const radius = outlineRadius * Noise.randomInRange(1, 1.3);\r\n            result.push({\r\n                x: radius * Math.cos(angle),\r\n                y: radius * Math.sin(angle),\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { Corolla };\r\n\r\n","import { Corolla } from \"./corolla\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\nimport { Rope } from \"./rope\";\r\n\r\nclass Flower {\r\n    public static readonly maxSegmentLength: number = 20;\r\n\r\n    private readonly attachPoint: IPoint;\r\n    private readonly stem: Rope;\r\n    private readonly corolla: Corolla;\r\n\r\n    public constructor(attachPoint: IPoint, length: number) {\r\n        this.attachPoint = attachPoint;\r\n\r\n        const nbNodes = Math.max(length / Flower.maxSegmentLength);\r\n        this.stem = new Rope(attachPoint, length / nbNodes, nbNodes);\r\n\r\n        this.corolla = new Corolla();\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        this.corolla.update(dt);\r\n        const corollaAcceleration = this.corolla.getAcceleration(forceField);\r\n        this.stem.dampening = Parameters.dampening;\r\n        this.stem.update(dt, this.attachPoint, corollaAcceleration);\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public getDrawableStem(): Line {\r\n        return this.stem.getDrawableLine(5);\r\n    }\r\n\r\n    public drawCorolla(plotter: Plotter): void {\r\n        this.corolla.draw(plotter);\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        return this.corolla.isDead(lowestAllowed) && this.stem.highestPoint >= lowestAllowed;\r\n    }\r\n\r\n    private attachCorolla(): void {\r\n        this.corolla.position.x = this.stem.endPosition.x;\r\n        this.corolla.position.y = this.stem.endPosition.y;\r\n    }\r\n}\r\n\r\nexport { Flower };\r\n","import { Flower } from \"./flower\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\n\r\nclass FlowersManager {\r\n    private readonly flowers: Flower[];\r\n\r\n    public constructor() {\r\n        this.flowers = [];\r\n    }\r\n\r\n    public reset(): void {\r\n        this.flowers.length = 0;\r\n    }\r\n\r\n    public manage(domainWidth: number, domainHeight: number): void {\r\n        let idealNumberOfFlowers = Math.round(domainWidth * Parameters.flowersDensity);\r\n        if (idealNumberOfFlowers <= 0) {\r\n            idealNumberOfFlowers = 1;\r\n        }\r\n\r\n        // create new flowers if needed\r\n        while (this.flowers.length < idealNumberOfFlowers) {\r\n            const newFlower = FlowersManager.createFlower(domainWidth, domainHeight);\r\n            this.flowers.push(newFlower);\r\n        }\r\n\r\n        // handle old flowers\r\n        for (let iF = this.flowers.length - 1; iF >= 0; iF--) {\r\n            if (this.flowers[iF].isDead(domainHeight)) {\r\n                if (this.flowers.length > idealNumberOfFlowers) {\r\n                    // we have too many flowers already, kill old ones\r\n                    this.flowers.splice(iF, 1);\r\n                    iF--;\r\n                } else {\r\n                    // we must maintain this flowers count, recycle old ones\r\n                    this.flowers[iF] = FlowersManager.createFlower(domainWidth, domainHeight);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        for (const flower of this.flowers) {\r\n            flower.update(dt, forceField);\r\n        }\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        const stems: Line[] = [];\r\n\r\n        for (const flower of this.flowers) {\r\n            stems.push(flower.getDrawableStem());\r\n        }\r\n\r\n        plotter.drawLines(stems);\r\n        for (const flower of this.flowers) {\r\n            flower.drawCorolla(plotter);\r\n        }\r\n    }\r\n\r\n    private static createFlower(domainWidth: number, domainHeight: number): Flower {\r\n        const attachPoint: IPoint = {\r\n            x: domainWidth * Math.random(),\r\n            y: domainHeight,\r\n        };\r\n\r\n        const flowerLength = Noise.randomInRange(0.2, 0.8) * domainHeight;\r\n        return new Flower(attachPoint, flowerLength);\r\n    }\r\n}\r\n\r\nexport { FlowersManager };\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nclass ForceField {\r\n    private readonly fleeMouseEnabled: boolean;\r\n\r\n    public constructor(private readonly mousePosition: IPoint, private readonly maxInfluenceDistance: number) {\r\n        this.fleeMouseEnabled = Parameters.fleeMouse;\r\n    }\r\n\r\n    public computeForce(location: IPoint): IVector {\r\n        if (!this.fleeMouseEnabled) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const fromMouseX = location.x - this.mousePosition.x;\r\n        const fromMouseY = location.y - this.mousePosition.y;\r\n        const distanceToMouse = Math.sqrt(fromMouseX * fromMouseX + fromMouseY * fromMouseY);\r\n\r\n        if (distanceToMouse > this.maxInfluenceDistance) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const mouseInfluence = 0.5 + Math.cos(Math.PI * distanceToMouse / this.maxInfluenceDistance);\r\n        return {\r\n            x: mouseInfluence * mouseInfluence * fromMouseX / distanceToMouse,\r\n            y: mouseInfluence * mouseInfluence * fromMouseY / distanceToMouse,\r\n        };\r\n    }\r\n}\r\n\r\nexport { ForceField };\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\((.*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean)  => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"./shaders/\" + filename, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport { downloadTextFile };\r\n","import { IVector } from \"./interfaces\";\r\n\r\nclass Noise {\r\n    private readonly period: number;\r\n    private time: number;\r\n\r\n    public last: IVector;\r\n    public next: IVector;\r\n\r\n    public constructor(period: number) {\r\n        this.period = period;\r\n        this.time = 0;\r\n        this.last = { x: 0, y: 0 };\r\n        this.next = { x: 0, y: 0 };\r\n\r\n        this.last = Noise.randomVector();\r\n        this.next = Noise.randomVector();\r\n    }\r\n\r\n    public compute(dt: number): IVector {\r\n        this.time += dt;\r\n        if (this.time > this.period) {\r\n            this.last = this.next;\r\n            this.next = Noise.randomVector();\r\n            this.time = this.time % this.period;\r\n        }\r\n\r\n        const r = this.time / this.period;\r\n        return {\r\n            x: this.last.x * (1 - r) + this.next.x * r,\r\n            y: this.last.y * (1 - r) + this.next.y * r,\r\n        };\r\n    }\r\n\r\n    public static randomInRange(from: number, to: number): number {\r\n        return from + (to - from) * Math.random();\r\n    }\r\n\r\n    private static randomVector(): IVector {\r\n        return { x: Math.random(), y: Math.random() };\r\n    }\r\n}\r\n\r\nexport { Noise };\r\n","import { IPoint } from \"./interfaces\";\r\n\r\nimport \"./page-interface-generated\";\r\nimport { Color } from \"./plotting/color\";\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    FLOWERS_RANGE: \"flowers-range-id\",\r\n    WIND_RANGE: \"wind-range-id\",\r\n    SPEED_RANGE: \"speed-range-id\",\r\n    DAMPENING_RANGE: \"dampening-range-id\",\r\n    FLEE_MOUSE_CHECKBOX: \"flee-mouse-checkbox-id\",\r\n    RESET_BUTTON: \"reset-button-id\",\r\n    BACKGROUND_COLORPICKER: \"background-color-id\",\r\n    LINES_COLORPICKER: \"lines-color-id\",\r\n    SINGLE_PETAL_COLOR_CHECKBOX: \"single-petal-color-checkbox-id\",\r\n    PETAL_COLORPICKER: \"petal-color-id\",\r\n    DOWNLOAD_BUTTON: \"download-button-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype Observer = () => unknown;\r\nfunction callObservers(observers: Observer[]) {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst resetObservers: Observer[] = [];\r\nconst downloadObservers: Observer[] = [];\r\n\r\nfunction getColor(id: string): Color {\r\n    const rgb = Page.ColorPicker.getValue(id);\r\n    return new Color(rgb.r, rgb.g, rgb.b);\r\n}\r\n\r\nlet backgroundColor: Color = getColor(controlId.BACKGROUND_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.BACKGROUND_COLORPICKER, () => { backgroundColor = getColor(controlId.BACKGROUND_COLORPICKER); });\r\n\r\nlet linesColor: Color = getColor(controlId.LINES_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.LINES_COLORPICKER, () => { linesColor = getColor(controlId.LINES_COLORPICKER); });\r\n\r\nlet petalsColor: Color = getColor(controlId.PETAL_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.PETAL_COLORPICKER, () => { petalsColor = getColor(controlId.PETAL_COLORPICKER); });\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get mousePositionInPixels(): IPoint {\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        if (mousePosition.length === 2) {\r\n            const canvasSize = Page.Canvas.getSize();\r\n            return {\r\n                x: canvasSize[0] * mousePosition[0],\r\n                y: canvasSize[1] * mousePosition[1],\r\n            };\r\n        } else {\r\n            // handles a bug where mousePosition is empty when the page is initializing\r\n            return { x: 0, y: 0 };\r\n        }\r\n    }\r\n\r\n    public static get flowersDensity(): number {\r\n        return Page.Range.getValue(controlId.FLOWERS_RANGE) * 0.25;\r\n    }\r\n\r\n    public static get wind(): number {\r\n        return Page.Range.getValue(controlId.WIND_RANGE);\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE);\r\n    }\r\n\r\n    public static get dampening(): number {\r\n        return 1 - 0.01 * Page.Range.getValue(controlId.DAMPENING_RANGE);\r\n    }\r\n\r\n    public static get fleeMouse(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.FLEE_MOUSE_CHECKBOX);\r\n    }\r\n\r\n    public static addResetObserver(observer: Observer): void {\r\n        resetObservers.push(observer);\r\n    }\r\n\r\n    public static get backgroundColor(): Color {\r\n        return backgroundColor;\r\n    }\r\n\r\n    public static get linesColor(): Color {\r\n        return linesColor;\r\n    }\r\n\r\n    public static get singlePetalColor(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    }\r\n\r\n    public static get petalColor(): Color {\r\n        return petalsColor;\r\n    }\r\n\r\n    public static addDownloadObserver(observer: Observer): void {\r\n        downloadObservers.push(observer);\r\n    }\r\n\r\n    private constructor() { }\r\n}\r\n\r\nfunction updatePetalColorsVisibility(): void {\r\n    const visible = Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    Page.Controls.setVisibility(controlId.PETAL_COLORPICKER, visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, updatePetalColorsVisibility);\r\nupdatePetalColorsVisibility();\r\n\r\nPage.Button.addObserver(controlId.RESET_BUTTON, () => {\r\n    callObservers(resetObservers);\r\n});\r\n\r\nPage.Button.addObserver(controlId.DOWNLOAD_BUTTON, () => {\r\n    callObservers(downloadObservers);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","class Color {\r\n    public readonly r: number; // integer in [0,255]\r\n    public readonly g: number; // integer in [0,255]\r\n    public readonly b: number; // integer in [0,255]\r\n\r\n    public readonly rNormalized: number; // in [0,1]\r\n    public readonly gNormalized: number; // in [0,1]\r\n    public readonly bNormalized: number; // in [0,1]\r\n\r\n    public constructor(r: number, g: number, b: number) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n\r\n        this.rNormalized = r /255;\r\n        this.gNormalized = g /255;\r\n        this.bNormalized = b /255;\r\n    }\r\n\r\n    public toStringRGB(): string {\r\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n    }\r\n\r\n    /**\r\n     * @param alpha in [0, 1]\r\n     */\r\n    public toStringRGBA(alpha: number): string {\r\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${alpha})`;\r\n    }\r\n}\r\n\r\nexport { Color };\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Line } from \"./plotter\";\r\nimport { PlotterCanvas } from \"./plotter-canvas-base\";\r\nimport { Color } from \"./color\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nfunction ellipsePolyfill(this: CanvasRenderingContext2D, centerX: number, centerY: number, radiusX: number, radiusY: number) {\r\n    this.arc(centerX, centerY, Math.max(radiusX, radiusY), 0, 2 * Math.PI);\r\n}\r\n\r\nclass PlotterCanvas2D extends PlotterCanvas {\r\n    private readonly context: CanvasRenderingContext2D;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n    }\r\n\r\n    protected initializeInternal(): void {\r\n        this.context.fillStyle = this.fillColor.toStringRGB();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        if (lines.length >= 1) {\r\n            this.context.strokeStyle = this.lineColor.toStringRGB();\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.context.moveTo(line[0].x * this.cssPixel, line[0].y * this.cssPixel);\r\n                    for (let iP = 1; iP < line.length; iP++) {\r\n                        this.context.lineTo(line[iP].x * this.cssPixel, line[iP].y * this.cssPixel);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length >= 2) {\r\n            this.context.fillStyle = this.fillColor.toStringRGB();\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            this.context.moveTo((polygon[0].x + offset.x) * this.cssPixel, (polygon[0].y + offset.y) * this.cssPixel);\r\n\r\n            for (let iP = 1; iP < polygon.length; iP++) {\r\n                this.context.lineTo((polygon[iP].x + offset.x) * this.cssPixel, (polygon[iP].y + offset.y) * this.cssPixel);\r\n            }\r\n\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        this.context.fillStyle = color.toStringRGBA(this.ellipseOpacity);\r\n\r\n        if (typeof this.context.ellipse !== \"function\") {\r\n            this.context.ellipse = ellipsePolyfill;\r\n        }\r\n\r\n        for (const ellipse of ellipses) {\r\n            this.context.beginPath();\r\n            this.context.ellipse(ellipse.center.x * this.cssPixel, ellipse.center.y * this.cssPixel, 0.5 * ellipse.width * this.cssPixel, 0.5 * ellipse.height * this.cssPixel, ellipse.orientation, 0, 2 * Math.PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas2D,\r\n};\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Line, Plotter } from \"./plotter\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nabstract class PlotterCanvas extends Plotter {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected readonly cssPixel: number;\r\n\r\n    public _width: number;\r\n    public _height: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.adjustToCanvas();\r\n    }\r\n\r\n    public adjustToCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._width = this.canvas.clientWidth;\r\n        this._height = this.canvas.clientHeight;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas,\r\n};\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Line } from \"./plotter\";\r\nimport { PlotterCanvas } from \"./plotter-canvas-base\";\r\n\r\nimport { gl, initGL } from \"../gl-utils/gl-canvas\";\r\nimport { Shader } from \"../gl-utils/shader\";\r\nimport * as ShaderManager from \"../gl-utils/shader-manager\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { Color } from \"./color\";\r\n\r\n\r\nenum EBatchType {\r\n    LINES,\r\n    POLYGONS,\r\n    ELLIPSES,\r\n}\r\n\r\ninterface IBatch {\r\n    type: EBatchType;\r\n    batchId: number;\r\n}\r\n\r\ninterface ILinesBatch extends IBatch {\r\n    type: EBatchType.LINES;\r\n    lines: Line[];\r\n    nbSegments: number;\r\n}\r\n\r\ninterface IEllipsesBatch extends IBatch {\r\n    type: EBatchType.ELLIPSES;\r\n    ellipsesList: IEllipse[];\r\n    color: Color;\r\n}\r\n\r\ninterface IPolygonsBatch extends IBatch {\r\n    outline: IPoint[];\r\n    center: IPoint;\r\n}\r\n\r\nfunction loadShader(name: string, callback: (loadedShader: Shader) => unknown): void {\r\n    ShaderManager.buildShader({\r\n        vertexFilename: `${name}.vert`,\r\n        fragmentFilename: `${name}.frag`,\r\n        injected: {},\r\n    }, (builtShader: Shader | null) => {\r\n        if (builtShader === null) {\r\n            const errorMessage = `Failed to load or build the ${name} shader.`;\r\n            Page.Demopage.setErrorMessage(`shader-${name}`, errorMessage);\r\n            throw new Error(errorMessage);\r\n        }\r\n        callback(builtShader);\r\n    });\r\n}\r\n\r\nclass PlotterCanvasWebGL extends PlotterCanvas {\r\n    private linesShader: Shader;\r\n    private readonly linesVBOId: WebGLBuffer;\r\n\r\n    private ellipsesShader: Shader;\r\n    private readonly ellipsesVBOId: WebGLBuffer;\r\n\r\n    private polygonsShader: Shader;\r\n    private readonly corollaVBOId: WebGLBuffer;\r\n    private readonly corollaIndexVBOId: WebGLBuffer;\r\n\r\n    private batches: IBatch[];\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        if (!initGL()) {\r\n            throw new Error(\"Failed to initialize WebGL.\");\r\n        }\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.clearDepth(1);\r\n\r\n        this.linesVBOId = gl.createBuffer();\r\n        this.ellipsesVBOId = gl.createBuffer();\r\n        this.corollaVBOId = gl.createBuffer();\r\n        this.corollaIndexVBOId = gl.createBuffer();\r\n\r\n        loadShader(\"lines\", (shader: Shader) => { this.linesShader = shader; });\r\n        loadShader(\"ellipses\", (shader: Shader) => { this.ellipsesShader = shader; });\r\n        loadShader(\"polygons\", (shader: Shader) => { this.polygonsShader = shader; });\r\n    }\r\n\r\n    public initializeInternal(): void {\r\n        gl.viewport(0, 0, this.width * this.cssPixel, this.height * this.cssPixel);\r\n        gl.clearColor(this.fillColor.rNormalized, this.fillColor.gNormalized, this.fillColor.bNormalized, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // tslint:disable-line no-bitwise\r\n\r\n        this.batches = [];\r\n    }\r\n\r\n    // tslint:disable-next-line no-empty\r\n    public finalize(): void {\r\n        const linesBatch: ILinesBatch[] = [];\r\n        const polygonsBatch: IPolygonsBatch[] = [];\r\n        const ellipsesBatch: IEllipsesBatch[] = [];\r\n\r\n        for (const batch of this.batches) {\r\n            if (batch.type === EBatchType.LINES) {\r\n                linesBatch.push(batch as ILinesBatch);\r\n            } else if (batch.type === EBatchType.POLYGONS) {\r\n                polygonsBatch.push(batch as IPolygonsBatch);\r\n            } else if (batch.type === EBatchType.ELLIPSES) {\r\n                ellipsesBatch.push(batch as IEllipsesBatch);\r\n            }\r\n        }\r\n\r\n        if (linesBatch.length > 0) {\r\n            this.drawLinesBatches(linesBatch);\r\n        }\r\n\r\n        gl.depthMask(true); // write to depth buffer\r\n        if (polygonsBatch.length > 0) {\r\n            this.drawPolygonsBatches(polygonsBatch);\r\n        }\r\n\r\n        gl.depthMask(false); // don't write to depth buffer because ellipses are not opaque\r\n        if (ellipsesBatch.length > 0) {\r\n            this.drawEllipseBatches(ellipsesBatch);\r\n        }\r\n        this.batches = [];\r\n    }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        const nonTrivalLines: Line[] = [];\r\n\r\n        let nbSegments = 0;\r\n        for (const line of lines) {\r\n            if (line.length >= 2) {\r\n                nbSegments += line.length - 1;\r\n                nonTrivalLines.push(line);\r\n            }\r\n        }\r\n\r\n        if (nonTrivalLines.length > 0) {\r\n            const linesBatch: ILinesBatch = {\r\n                type: EBatchType.LINES,\r\n                lines: nonTrivalLines,\r\n                nbSegments,\r\n                batchId: this.batches.length,\r\n            };\r\n\r\n            this.batches.push(linesBatch);\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length > 0) {\r\n            const outline: IPoint[] = [];\r\n            for (const point of polygon) {\r\n                outline.push({\r\n                    x: point.x + offset.x,\r\n                    y: point.y + offset.y,\r\n                });\r\n            }\r\n\r\n            const polygonBatch: IPolygonsBatch = {\r\n                type: EBatchType.POLYGONS,\r\n                outline,\r\n                center: offset,\r\n                batchId: this.batches.length,\r\n            };\r\n            this.batches.push(polygonBatch);\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        if (ellipses.length > 0) {\r\n            const ellipsesBatch: IEllipsesBatch = {\r\n                type: EBatchType.ELLIPSES,\r\n                ellipsesList: ellipses,\r\n                color,\r\n                batchId: this.batches.length,\r\n            };\r\n            this.batches.push(ellipsesBatch);\r\n        }\r\n    }\r\n\r\n    private drawLinesBatches(batches: ILinesBatch[]) {\r\n        if (this.linesShader) {\r\n            let totalNbSegments = 0;\r\n            for (const batch of batches) {\r\n                totalNbSegments += batch.nbSegments;\r\n            }\r\n\r\n            const buffer = new Float32Array(2 * 2 * totalNbSegments);\r\n            {\r\n                let i = 0;\r\n                for (const batch of batches) {\r\n                    for (const line of batch.lines) {\r\n                        buffer[i++] = line[0].x;\r\n                        buffer[i++] = line[0].y;\r\n\r\n                        for (let iP = 1; iP < line.length - 1; iP++) {\r\n                            buffer[i++] = line[iP].x;\r\n                            buffer[i++] = line[iP].y;\r\n                            buffer[i++] = line[iP].x;\r\n                            buffer[i++] = line[iP].y;\r\n                        }\r\n\r\n                        buffer[i++] = line[line.length - 1].x;\r\n                        buffer[i++] = line[line.length - 1].y;\r\n                    }\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.linesVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.DYNAMIC_DRAW);\r\n\r\n            this.linesShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n            this.linesShader.u[\"uColor\"].value = [this.lineColor.rNormalized, this.lineColor.gNormalized, this.lineColor.bNormalized, 1];\r\n\r\n            this.linesShader.use();\r\n            const aVertexLoc = this.linesShader.a[\"aVertex\"].loc;\r\n            gl.enableVertexAttribArray(aVertexLoc);\r\n\r\n            const FLOAT_SIZE_IN_BYTES = 4;\r\n            let batchStartIndex = 0;\r\n            for (const batch of batches) {\r\n                this.linesShader.u[\"uDepth\"].value = this.computeBatchDepth(batch);\r\n                this.linesShader.bindUniforms();\r\n                gl.vertexAttribPointer(aVertexLoc, 2, gl.FLOAT, false, 0, 2 * batchStartIndex * FLOAT_SIZE_IN_BYTES);\r\n                const nbVertices = 2 * batch.nbSegments;\r\n                gl.drawArrays(gl.LINES, 0, nbVertices);\r\n                batchStartIndex += nbVertices;\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawPolygonsBatches(batches: IPolygonsBatch[]): void {\r\n        if (this.polygonsShader) {\r\n            let totalNbVertices = 0;\r\n            let totalNbTriangles = 0;\r\n            let totalNbLines = 0;\r\n            for (const polygon of batches) {\r\n                totalNbVertices += 1 + polygon.outline.length;\r\n                totalNbTriangles += polygon.outline.length;\r\n                totalNbLines += polygon.outline.length;\r\n            }\r\n\r\n            const verticesBuffer = new Float32Array(4 * totalNbVertices);\r\n            {\r\n                let iVertice = 0;\r\n                for (const polygon of batches) {\r\n                    const polygonDepth = this.computeBatchDepth(polygon);\r\n                    verticesBuffer[iVertice++] = polygon.center.x;\r\n                    verticesBuffer[iVertice++] = polygon.center.y;\r\n                    verticesBuffer[iVertice++] = polygonDepth;\r\n                    verticesBuffer[iVertice++] = 0; // padding for alignment\r\n\r\n                    for (const outlinePoint of polygon.outline) {\r\n                        verticesBuffer[iVertice++] = outlinePoint.x;\r\n                        verticesBuffer[iVertice++] = outlinePoint.y;\r\n                        verticesBuffer[iVertice++] = polygonDepth;\r\n                        verticesBuffer[iVertice++] = 0; // padding for alignment\r\n                    }\r\n                }\r\n            }\r\n\r\n            const indicesBuffer = new Uint16Array(2 * totalNbLines + 3 * totalNbTriangles);\r\n            {\r\n                let iIndex = 0;\r\n                let iVerticeIndex = 0;\r\n                for (const polygon of batches) {\r\n                    const indexOfPolygonCenter = iVerticeIndex;\r\n\r\n                    for (let iPoint = 0; iPoint < polygon.outline.length - 1; iPoint++) {\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter;\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter + iPoint + 1;\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter + iPoint + 2;\r\n                    }\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter;\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter + polygon.outline.length;\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter + 1;\r\n\r\n                    iVerticeIndex += polygon.outline.length + 1;\r\n                }\r\n\r\n                iVerticeIndex = 0;\r\n                for (const polygon of batches) {\r\n                    for (let iPoint = 0; iPoint < polygon.outline.length - 1; iPoint++) {\r\n                        indicesBuffer[iIndex++] = iVerticeIndex + iPoint + 1;\r\n                        indicesBuffer[iIndex++] = iVerticeIndex + iPoint + 2;\r\n                    }\r\n                    indicesBuffer[iIndex++] = iVerticeIndex + polygon.outline.length;\r\n                    indicesBuffer[iIndex++] = iVerticeIndex + 1;\r\n\r\n                    iVerticeIndex += polygon.outline.length + 1;\r\n                }\r\n            }\r\n\r\n            this.polygonsShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n\r\n            this.polygonsShader.use();\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.corollaVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, verticesBuffer, gl.DYNAMIC_DRAW);\r\n            const aDataLoc = this.polygonsShader.a[\"aData\"].loc;\r\n            gl.enableVertexAttribArray(aDataLoc);\r\n            gl.vertexAttribPointer(aDataLoc, 4, gl.FLOAT, false, 0, 0);\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.corollaIndexVBOId);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer, gl.DYNAMIC_DRAW);\r\n\r\n            this.polygonsShader.u[\"uColor\"].value = [this.fillColor.rNormalized, this.fillColor.gNormalized, this.fillColor.bNormalized, 1];\r\n            this.polygonsShader.bindUniforms();\r\n            gl.drawElements(gl.TRIANGLES, 3 * totalNbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n            this.polygonsShader.u[\"uColor\"].value = [this.lineColor.rNormalized, this.lineColor.gNormalized, this.lineColor.bNormalized, 2];\r\n            this.polygonsShader.bindUniforms();\r\n            const UNSIGNED_SHORT_SIZE_IN_BYTES = 2;\r\n            gl.drawElements(gl.LINES, 2 * totalNbLines, gl.UNSIGNED_SHORT, 3 * totalNbTriangles * UNSIGNED_SHORT_SIZE_IN_BYTES);\r\n        }\r\n    }\r\n\r\n    private drawEllipseBatches(batches: IEllipsesBatch[]): void {\r\n        if (this.ellipsesShader) {\r\n            let totalNbPoints = 0;\r\n            for (const ellipseBatch of batches) {\r\n                totalNbPoints += ellipseBatch.ellipsesList.length;\r\n            }\r\n\r\n            const buffer = new Float32Array(8 * totalNbPoints);\r\n            {\r\n                let i = 0;\r\n                for (const ellipseBatch of batches) {\r\n                    const batchDepth = this.computeBatchDepth(ellipseBatch);\r\n\r\n                    for (const ellipse of ellipseBatch.ellipsesList) {\r\n                        const widestSide = Math.ceil(Math.max(1, ellipse.width, ellipse.height)); // integer\r\n                        const proportions = Math.min(ellipse.width, ellipse.height) / widestSide; // in [0, 1]\r\n                        const encodedDimensions = Math.ceil(widestSide * this.cssPixel) + proportions;\r\n\r\n                        buffer[i++] = ellipse.center.x;\r\n                        buffer[i++] = ellipse.center.y;\r\n                        buffer[i++] = encodedDimensions;\r\n                        buffer[i++] = batchDepth;\r\n\r\n                        buffer[i++] = ellipseBatch.color.rNormalized;\r\n                        buffer[i++] = ellipseBatch.color.gNormalized;\r\n                        buffer[i++] = ellipseBatch.color.bNormalized;\r\n                        buffer[i++] = ellipse.orientation;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.ellipsesShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n            this.ellipsesShader.u[\"uPetalAlpha\"].value = 0.2;\r\n\r\n            this.ellipsesShader.use();\r\n            this.ellipsesShader.bindUniforms();\r\n\r\n            // gl.depthMask(false); // don't write to depth buffer\r\n\r\n            const BYTES_PER_FLOAT = 4;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.ellipsesVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.DYNAMIC_DRAW);\r\n            const aData1Loc = this.ellipsesShader.a[\"aData1\"].loc;\r\n            gl.enableVertexAttribArray(aData1Loc);\r\n            gl.vertexAttribPointer(aData1Loc, 4, gl.FLOAT, false, 2 * 4 * BYTES_PER_FLOAT, 0);\r\n            const aData2Loc = this.ellipsesShader.a[\"aData2\"].loc;\r\n            gl.enableVertexAttribArray(aData2Loc);\r\n            gl.vertexAttribPointer(aData2Loc, 4, gl.FLOAT, false, 2 * 4 * BYTES_PER_FLOAT, 4 * BYTES_PER_FLOAT);\r\n            gl.drawArrays(gl.POINTS, 0, totalNbPoints);\r\n        }\r\n    }\r\n\r\n    private computeBatchDepth(batch: IBatch): number {\r\n        return 1.9 * (0.5 - (batch.batchId / this.batches.length));\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvasWebGL,\r\n};\r\n","import { Line, Plotter } from \"./plotter\";\r\nimport { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nfunction radianToDegree(radian: number) {\r\n    return 180 * radian / Math.PI;\r\n}\r\n\r\nclass PlotterSvg extends Plotter {\r\n    private readonly stringParts: string[];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    public constructor(width: number, height: number) {\r\n        super();\r\n        this.stringParts = [];\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    protected initializeInternal(): void {\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this.width} ${this.height}\">`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${this.fillColor.toStringRGB()}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this.width}\" height=\"${this.height}\"/>`);\r\n        this.stringParts.push(`\\t<g fill=\"${this.fillColor.toStringRGB()}\" stroke=\"${this.lineColor.toStringRGB()}\" stroke-width=\"1\">`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        this.stringParts.push(\"\\t</g>\");\r\n        this.stringParts.push(\"</svg>\");\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.stringParts.join(\"\\n\");\r\n    }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        if (lines.length >= 1) {\r\n            this.stringParts.push(`\\t\\t<g fill=\"none\">`);\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.stringParts.push(`\\t\\t\\t<path d=\"${PlotterSvg.computePath(line)}\"/>`);\r\n                }\r\n            }\r\n\r\n            this.stringParts.push(`\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length >= 2) {\r\n            const transform = `translate(${offset.x.toFixed(1)} ${offset.y.toFixed(1)})`;\r\n            this.stringParts.push(`\\t\\t<path d=\"${PlotterSvg.computePath(polygon)}Z\" transform=\"${transform}\"/>`);\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        if (ellipses.length >= 1) {\r\n            this.stringParts.push(`\\t\\t<g stroke=\"none\" fill=\"${color.toStringRGBA(this.ellipseOpacity)}\">`);\r\n            for (const ellipse of ellipses) {\r\n                const transform = `translate(${ellipse.center.x.toFixed(1)} ${ellipse.center.y.toFixed(1)}) rotate(${radianToDegree(ellipse.orientation).toFixed(1)})`;\r\n                this.stringParts.push(`\\t\\t\\t<ellipse cx=\"0\" cy=\"0\" rx=\"${(0.5 * ellipse.width).toFixed(1)}\" ry=\"${(0.5 * ellipse.height).toFixed(1)}\" transform=\"${transform}\"/>`);\r\n            }\r\n            this.stringParts.push(`\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    private static computePath(line: Line): string {\r\n        const start = `M${line[0].x.toFixed(1)},${line[0].y.toFixed(1)}L`;\r\n\r\n        const pathParts: string[] = [];\r\n        for (let iP = 1; iP < line.length; iP++) {\r\n            pathParts.push(`${line[iP].x.toFixed(1)},${line[iP].y.toFixed(1)}`);\r\n        }\r\n\r\n        return start + pathParts.join(\" \");\r\n    }\r\n}\r\n\r\nexport { PlotterSvg };\r\n\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\ntype Line = IPoint[];\r\n\r\nabstract class Plotter {\r\n    protected fillColor: Color;\r\n    protected lineColor: Color;\r\n    protected ellipseOpacity: number; // in [0,1]\r\n\r\n    public initialize(fillColor: Color, lineColor: Color, ellipseOpacity: number): void {\r\n        this.fillColor = fillColor;\r\n        this.lineColor = lineColor;\r\n        this.ellipseOpacity = ellipseOpacity;\r\n        this.initializeInternal();\r\n    }\r\n\r\n    protected abstract initializeInternal(): void;\r\n\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawLines(lines: Line[]): void;\r\n\r\n    public abstract drawPolygon(polygon: Line, offset: IPoint): void;\r\n\r\n    public abstract drawEllipses(ellipses: IEllipse[], color: Color): void;\r\n}\r\n\r\nexport {\r\n    Line,\r\n    Plotter,\r\n};\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\n\r\ninterface IRopeNode {\r\n    pos: IPoint;\r\n    previousPos: IPoint;\r\n    acc: IVector;\r\n}\r\n\r\nfunction createRopeNode(x: number, y: number): IRopeNode {\r\n    return {\r\n        pos: { x, y },\r\n        previousPos: { x, y },\r\n        acc: { x: 0, y: 0 },\r\n    };\r\n}\r\n\r\nconst NB_ITERATIONS = 8;\r\n\r\nclass Rope {\r\n    public dampening: number = 1;\r\n\r\n    private readonly nodes: IRopeNode[];\r\n    private readonly segmentLength: number;\r\n    private readonly totalLength: number;\r\n\r\n    public constructor(startingPoint: IPoint, segmentLength: number, nbNodes: number) {\r\n        this.segmentLength = segmentLength;\r\n        this.totalLength = segmentLength * nbNodes;\r\n\r\n        this.nodes = [];\r\n        this.nodes.push(createRopeNode(startingPoint.x, startingPoint.y));\r\n        for (let iN = 0; iN < nbNodes; iN++) {\r\n            const angle = 2 * Math.PI * Math.random();\r\n            this.nodes.push(createRopeNode(\r\n                this.nodes[this.nodes.length - 1].pos.x + segmentLength * Math.cos(angle),\r\n                this.nodes[this.nodes.length - 1].pos.y + Math.abs(segmentLength * Math.sin(angle))\r\n            ));\r\n        }\r\n    }\r\n\r\n    public getDrawableLine(minSegmentLength: number): Line {\r\n        return this.computeSmoothLine(this.totalLength / minSegmentLength);\r\n    }\r\n\r\n    public update(dt: number, origin: IPoint, endAcceleration: IVector): void {\r\n        this.applyForces(endAcceleration);\r\n        this.applyVerlet(dt);\r\n\r\n        for (let i = 0; i < NB_ITERATIONS; i++) {\r\n            this.applyConstraints(origin);\r\n        }\r\n    }\r\n\r\n    public get endPosition(): IPoint {\r\n        return this.nodes[this.nodes.length - 1].pos;\r\n    }\r\n\r\n    public get highestPoint(): number {\r\n        let highest = 1000000;\r\n        for (const node of this.nodes) {\r\n            if (node.pos.y < highest) {\r\n                highest = node.pos.y;\r\n            }\r\n        }\r\n        return highest;\r\n    }\r\n\r\n    private applyForces(endAcceleration: IVector): void {\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            this.nodes[iN].acc.x = 0;\r\n            this.nodes[iN].acc.y = 0;\r\n        }\r\n\r\n        this.nodes[this.nodes.length - 1].acc.x += endAcceleration.x;\r\n        this.nodes[this.nodes.length - 1].acc.y += endAcceleration.y;\r\n    }\r\n\r\n    private applyVerlet(dt: number): void {\r\n        for (const node of this.nodes) {\r\n            // CURRENT_VELOCITY = (CURRENT_POSITION - PREVIOUS_POSITION) / DT\r\n            // NEW_VELOCITY = DAMPENING * CURRENT_VELOCITY + CURRENT_ACCELERATION * DT\r\n            // NEW_POSITION = CURRENT_POSITION + NEW_VELOCITY * DT\r\n\r\n            const newPosX = node.pos.x + this.dampening * (node.pos.x - node.previousPos.x) + dt * dt * node.acc.x;\r\n            const newPosY = node.pos.y + this.dampening * (node.pos.y - node.previousPos.y) + dt * dt * node.acc.y;\r\n\r\n            node.previousPos.x = node.pos.x;\r\n            node.previousPos.y = node.pos.y;\r\n            node.pos.x = newPosX;\r\n            node.pos.y = newPosY;\r\n        }\r\n    }\r\n\r\n    private applyConstraints(origin: IPoint): void {\r\n        const EPSILON = 0.000001;\r\n        this.nodes[0].pos.x = origin.x;\r\n        this.nodes[0].pos.y = origin.y;\r\n\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            const dX = this.nodes[iN].pos.x - this.nodes[iN - 1].pos.x;\r\n            const dY = this.nodes[iN].pos.y - this.nodes[iN - 1].pos.y;\r\n            const distanceToPrevious = Math.sqrt(dX * dX + dY * dY);\r\n            const correction = 0.5 * (1 - this.segmentLength / (distanceToPrevious + EPSILON));\r\n            const correctionX = dX * correction;\r\n            const correctionY = dY * correction;\r\n\r\n            this.nodes[iN].pos.x -= correctionX;\r\n            this.nodes[iN].pos.y -= correctionY;\r\n            this.nodes[iN - 1].pos.x += correctionX;\r\n            this.nodes[iN - 1].pos.y += correctionY;\r\n        }\r\n    }\r\n\r\n    private computeSmoothLine(minimumPoints: number): IPoint[] {\r\n        let points: IPoint[] = [];\r\n        for (const node of this.nodes) {\r\n            points.push(node.pos);\r\n        }\r\n\r\n        while (points.length < minimumPoints) {\r\n            points = Rope.subdivideLine(points, 0.333);\r\n        }\r\n        return points;\r\n    }\r\n\r\n    // Chaikin\r\n    private static subdivideLine(sourcePoints: IPoint[], ratio: number): IPoint[] {\r\n        const newPoints: IPoint[] = [];\r\n        newPoints.push(sourcePoints[0]);\r\n\r\n        for (let iP = 0; iP < sourcePoints.length - 1; iP++) {\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * (1 - ratio) + sourcePoints[iP + 1].x * ratio,\r\n                y: sourcePoints[iP].y * (1 - ratio) + sourcePoints[iP + 1].y * ratio,\r\n            });\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * ratio + sourcePoints[iP + 1].x * (1 - ratio),\r\n                y: sourcePoints[iP].y * ratio + sourcePoints[iP + 1].y * (1 - ratio),\r\n            });\r\n        }\r\n\r\n        newPoints.push(sourcePoints[sourcePoints.length - 1]);\r\n        return newPoints;\r\n    }\r\n}\r\n\r\nexport { Rope };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FlowersManager } from \"./flowers-manager\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { downloadTextFile } from \"./helpers\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Plotter } from \"./plotting/plotter\";\r\nimport { PlotterCanvas2D } from \"./plotting/plotter-canvas-2d\";\r\nimport { PlotterCanvas } from \"./plotting/plotter-canvas-base\";\r\nimport { PlotterSvg } from \"./plotting/plotter-svg\";\r\n\r\nimport \"./page-interface-generated\";\r\nimport { PlotterCanvasWebGL } from \"./plotting/plotter-canvas-webgl\";\r\n\r\nfunction plot(flowersManager: FlowersManager, plotter: Plotter): void {\r\n    plotter.initialize(Parameters.backgroundColor, Parameters.linesColor, 0.2);\r\n    flowersManager.draw(plotter);\r\n    plotter.finalize();\r\n}\r\n\r\nfunction main() {\r\n    const plotter: PlotterCanvas = new PlotterCanvasWebGL() || new PlotterCanvas2D();\r\n    const flowersManager = new FlowersManager();\r\n\r\n    Parameters.addResetObserver(() => { flowersManager.reset(); });\r\n    Parameters.addDownloadObserver(() => { exportAsSvg(flowersManager, plotter.width, plotter.height); });\r\n\r\n    const maxDt = 1 / 60;\r\n    let lastUpdate = performance.now();\r\n    function mainLoop() {\r\n        const now = performance.now();\r\n        const dt = Parameters.speed * Math.min(maxDt, 0.001 * (now - lastUpdate));\r\n        lastUpdate = now;\r\n\r\n        plotter.adjustToCanvas();\r\n\r\n        flowersManager.manage(plotter.width, plotter.height);\r\n\r\n        const forceField = new ForceField(Parameters.mousePositionInPixels, 500);\r\n        flowersManager.update(dt, forceField);\r\n\r\n        plot(flowersManager, plotter);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nfunction exportAsSvg(flowersManager: FlowersManager, width: number, height: number): void {\r\n    const plotter = new PlotterSvg(width, height);\r\n    plot(flowersManager, plotter);\r\n\r\n    const svgText = plotter.toString();\r\n    downloadTextFile(\"flowers.svg\", svgText);\r\n}\r\n\r\nmain();\r\n"],"sourceRoot":""}