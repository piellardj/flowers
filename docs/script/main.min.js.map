{"version":3,"sources":["webpack://flowers/./src/ts/corolla.ts","webpack://flowers/./src/ts/flower.ts","webpack://flowers/./src/ts/flowers-manager.ts","webpack://flowers/./src/ts/force-field.ts","webpack://flowers/./src/ts/helpers.ts","webpack://flowers/./src/ts/noise.ts","webpack://flowers/./src/ts/parameters.ts","webpack://flowers/./src/ts/plotting/plotter-canvas-2d.ts","webpack://flowers/./src/ts/plotting/plotter-svg.ts","webpack://flowers/./src/ts/rope.ts","webpack://flowers/webpack/bootstrap","webpack://flowers/./src/ts/main.ts"],"names":["this","position","x","y","resetPetalColors","attachedPetals","computePetals","floatingPetals","outline","Corolla","computeOutline","noise","Noise","randomInRange","update","dt","length","Math","random","newFreePetal","pop","registerFloatingPetal","detachedPetal","center","petalArea","orientation","rotationSpeed","trimFloatingPetals","wind","compute","Parameters","draw","plotter","drawOutline","drawPetals","getAcceleration","forceField","acceleration","min","UPWARD_FORCE","fieldForce","computeForce","isDead","lowestAllowed","randomChannel","color","singlePetalColor","petalColor","floor","r","g","b","allPetals","concat","drawEllipsis","drawPolygon","linesColor","backgroundColor","iP","max","width","height","splice","petal","floatingPetal","push","nbPetals","result","i","PI","outlineNbPoints","outlineRadius","angle","radius","cos","sin","attachPoint","nbNodes","Flower","maxSegmentLength","stem","Rope","corolla","attachCorolla","corollaAcceleration","dampening","getDrawableStem","getDrawableLine","drawCorolla","highestPoint","endPosition","flowers","reset","manage","domainWidth","domainHeight","idealNumberOfFlowers","round","flowersDensity","newFlower","FlowersManager","createFlower","iF","stems","flower","drawLines","flowerLength","mousePosition","maxInfluenceDistance","fleeMouseEnabled","fleeMouse","location","fromMouseX","fromMouseY","distanceToMouse","sqrt","mouseInfluence","ForceField","downloadTextFile","fileName","content","fileType","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","period","time","last","next","randomVector","from","to","controlId","callObservers","observers","observer","resetObservers","downloadObservers","petalColorChangeObservers","Page","Canvas","getMousePosition","canvasSize","getSize","Range","getValue","Checkbox","isChecked","addResetObserver","ColorPicker","getValueHex","addPetalColorChange","addDownloadObserver","updatePetalColorsVisibility","visible","Controls","setVisibility","addObserver","Button","ellipsePolyfill","centerX","centerY","radiusX","radiusY","arc","canvas","getCanvas","context","getContext","alpha","cssPixel","devicePixelRatio","adjustToCanvas","actualWidth","clientWidth","actualHeight","clientHeight","_width","_height","initialize","fillStyle","fillRect","finalize","lines","strokeStyle","lineWidth","beginPath","line","moveTo","lineTo","stroke","closePath","polygon","offset","strokeColor","fillColor","fill","ellipsis","ellipse","PlotterCanvas2D","stringParts","toString","join","computePath","transform","toFixed","radian","start","pathParts","PlotterSvg","createRopeNode","pos","previousPos","acc","startingPoint","segmentLength","totalLength","nodes","iN","abs","minSegmentLength","computeSmoothLine","origin","endAcceleration","applyForces","applyVerlet","applyConstraints","highest","node","newPosX","newPosY","dX","dY","distanceToPrevious","correction","correctionX","correctionY","minimumPoints","points","subdivideLine","sourcePoints","ratio","newPoints","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","plot","flowersManager","svgText","exportAsSvg","lastUpdate","performance","now","requestAnimationFrame","mainLoop","speed","mousePositionInPixels","main"],"mappings":"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","file":"main.min.js","sourcesContent":["import { ForceField } from \"./force-field\";\r\nimport { IEllipse, IPoint, IVector } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { IColorRGB, Parameters } from \"./parameters\";\r\nimport { Plotter } from \"./plotting/plotter\";\r\n\r\ninterface IFloatingPetal extends IEllipse {\r\n    center: IPoint;\r\n    petalArea: number;\r\n    rotationSpeed: number;\r\n}\r\n\r\nfunction randomColor(): IColorRGB {\r\n    const random = Noise.randomInRange(0, 3);\r\n    const randomChannel = Math.floor(0.5 * 255 * (random % 1));\r\n\r\n    if (random < 1) {\r\n        return { r: 255, g: 0, b: 255 - randomChannel };\r\n    } else if (random < 2) {\r\n        return { r: 255, g: randomChannel, b: 0 };\r\n    } else if (random < 3) {\r\n        return { r: 255 - randomChannel, g: 255, b: 0 };\r\n    } else if (random < 4) {\r\n        return { r: 0, g: 255, b: randomChannel };\r\n    } else if (random < 5) {\r\n        return { r: 0, g: 255 - randomChannel, b: 255 };\r\n    } else {\r\n        return { r: randomChannel, g: 0, b: 255 };\r\n    }\r\n}\r\n\r\nconst PETALS_DROP_RATE = 0.1;\r\n\r\nclass Corolla {\r\n    public readonly position: IPoint; // readonly because attachedPetals reference it\r\n\r\n    private color: string;\r\n    private readonly attachedPetals: IEllipse[];\r\n    private readonly floatingPetals: IFloatingPetal[];\r\n    private readonly outline: IPoint[];\r\n\r\n    private readonly noise: Noise;\r\n    private wind: IVector;\r\n\r\n    public constructor() {\r\n        this.position = { x: 0, y: 0 };\r\n        this.resetPetalColors();\r\n        this.attachedPetals = this.computePetals(10);\r\n        this.floatingPetals = [];\r\n        this.outline = Corolla.computeOutline(40, 20);\r\n\r\n        this.noise = new Noise(Noise.randomInRange(1, 2));\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        if (this.attachedPetals.length > 0 && Math.random() < PETALS_DROP_RATE * dt) {\r\n            const newFreePetal = this.attachedPetals.pop();\r\n            this.registerFloatingPetal(newFreePetal);\r\n        }\r\n\r\n        for (const detachedPetal of this.floatingPetals) {\r\n            detachedPetal.center.y -= 0.05 * detachedPetal.petalArea * dt;\r\n            detachedPetal.orientation += detachedPetal.rotationSpeed * dt;\r\n        }\r\n        this.trimFloatingPetals();\r\n\r\n        this.wind = this.noise.compute(dt);\r\n        this.wind.x = Parameters.wind * 10000 * (this.wind.x - 0.5);\r\n        this.wind.y = 1000 * (this.wind.y - 0.5);\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        this.drawOutline(plotter);\r\n        this.drawPetals(plotter);\r\n    }\r\n\r\n    public getAcceleration(forceField: ForceField): IVector {\r\n        const acceleration: IVector = { x: 0, y: 0 };\r\n        acceleration.x += this.wind.x * Math.min(1, this.attachedPetals.length / 16);\r\n        acceleration.y += this.wind.y;\r\n\r\n        const DOWNWARD_FORCE = 10000;\r\n        const UPWARD_FORCE = [7000, 10000, 11000, 12000];\r\n        acceleration.y += DOWNWARD_FORCE - UPWARD_FORCE[Math.min(UPWARD_FORCE.length - 1, this.attachedPetals.length)];\r\n\r\n        const fieldForce = forceField.computeForce(this.position);\r\n        acceleration.x += 2000 * fieldForce.x;\r\n        acceleration.y += 2000 * fieldForce.y;\r\n\r\n        return acceleration;\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        return this.attachedPetals.length <= 0 && this.floatingPetals.length <= 0 && this.position.y > lowestAllowed + 50;\r\n    }\r\n\r\n    public resetPetalColors(): void {\r\n        const color = Parameters.singlePetalColor ? Parameters.petalColor : randomColor();\r\n        this.color = `rgba(${color.r}, ${color.g}, ${color.b}, 0.2)`;\r\n    }\r\n\r\n    private drawPetals(plotter: Plotter): void {\r\n        const allPetals = this.attachedPetals.concat(this.floatingPetals);\r\n        plotter.drawEllipsis(allPetals, this.color);\r\n    }\r\n\r\n    private drawOutline(plotter: Plotter): void {\r\n        plotter.drawPolygon(this.outline, this.position, Parameters.linesColor, Parameters.backgroundColor);\r\n    }\r\n\r\n    private trimFloatingPetals(): void {\r\n        for (let iP = this.floatingPetals.length - 1; iP >= 0; iP--) {\r\n            const highestPoint = this.floatingPetals[iP].center.y + 0.5 * Math.max(this.floatingPetals[iP].width, this.floatingPetals[iP].height);\r\n            if (highestPoint < 0) {\r\n                this.floatingPetals.splice(iP, 1);\r\n                iP--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private registerFloatingPetal(petal: IEllipse): void {\r\n        const floatingPetal = petal as IFloatingPetal;\r\n        floatingPetal.center = { x: this.position.x, y: this.position.y };\r\n        floatingPetal.petalArea = floatingPetal.width * floatingPetal.height;\r\n        floatingPetal.rotationSpeed = Noise.randomInRange(-1.5, 1.5);\r\n        this.floatingPetals.push(floatingPetal);\r\n    }\r\n\r\n    private computePetals(nbPetals: number): IEllipse[] {\r\n        const result: IEllipse[] = [];\r\n\r\n        for (let i = 0; i < nbPetals; i++) {\r\n            const width = Noise.randomInRange(50, 70);\r\n            const proportions = Noise.randomInRange(0.3, 0.7);\r\n            const height = proportions * width;\r\n            const orientation = Noise.randomInRange(0, 2 * Math.PI);\r\n\r\n            result.push({\r\n                width,\r\n                height,\r\n                orientation,\r\n                center: this.position,\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static computeOutline(outlineNbPoints: number, outlineRadius: number): IPoint[] {\r\n        const result: IPoint[] = [];\r\n\r\n        for (let i = 0; i < outlineNbPoints; i++) {\r\n            const angle = 2 * Math.PI * i / (outlineNbPoints - 1);\r\n            const radius = outlineRadius * Noise.randomInRange(1, 1.3);\r\n            result.push({\r\n                x: radius * Math.cos(angle),\r\n                y: radius * Math.sin(angle),\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { Corolla };\r\n\r\n","import { Corolla } from \"./corolla\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\nimport { Rope } from \"./rope\";\r\n\r\nclass Flower {\r\n    public static maxSegmentLength: number = 20;\r\n\r\n    private readonly attachPoint: IPoint;\r\n    private readonly stem: Rope;\r\n    private readonly corolla: Corolla;\r\n\r\n    public constructor(attachPoint: IPoint, length: number) {\r\n        this.attachPoint = attachPoint;\r\n\r\n        const nbNodes = Math.max(length / Flower.maxSegmentLength);\r\n        this.stem = new Rope(attachPoint, length / nbNodes, nbNodes);\r\n\r\n        this.corolla = new Corolla();\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        this.corolla.update(dt);\r\n        const corollaAcceleration = this.corolla.getAcceleration(forceField);\r\n        this.stem.dampening = Parameters.dampening;\r\n        this.stem.update(dt, this.attachPoint, corollaAcceleration);\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public getDrawableStem(): Line {\r\n        return this.stem.getDrawableLine(5);\r\n    }\r\n\r\n    public drawCorolla(plotter: Plotter): void {\r\n        this.corolla.draw(plotter);\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        return this.corolla.isDead(lowestAllowed) && this.stem.highestPoint >= lowestAllowed;\r\n    }\r\n\r\n    public resetPetalColors(): void {\r\n        this.corolla.resetPetalColors();\r\n    }\r\n\r\n    private attachCorolla(): void {\r\n        this.corolla.position.x = this.stem.endPosition.x;\r\n        this.corolla.position.y = this.stem.endPosition.y;\r\n    }\r\n}\r\n\r\nexport { Flower };\r\n","import { Flower } from \"./flower\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\n\r\nclass FlowersManager {\r\n    private readonly flowers: Flower[];\r\n\r\n    public constructor() {\r\n        this.flowers = [];\r\n    }\r\n\r\n    public reset(): void {\r\n        this.flowers.length = 0;\r\n    }\r\n\r\n    public manage(domainWidth: number, domainHeight: number): void {\r\n        let idealNumberOfFlowers = Math.round(domainWidth * Parameters.flowersDensity);\r\n        if (idealNumberOfFlowers <= 0) {\r\n            idealNumberOfFlowers = 1;\r\n        }\r\n\r\n        // create new flowers if needed\r\n        while (this.flowers.length < idealNumberOfFlowers) {\r\n            const newFlower = FlowersManager.createFlower(domainWidth, domainHeight)\r\n            this.flowers.push(newFlower);\r\n        }\r\n\r\n        // handle old flowers\r\n        for (let iF = this.flowers.length - 1; iF >= 0; iF--) {\r\n            if (this.flowers[iF].isDead(domainHeight)) {\r\n                if (this.flowers.length > idealNumberOfFlowers) {\r\n                    // we have too many flowers already, kill old ones\r\n                    this.flowers.splice(iF, 1);\r\n                    iF--;\r\n                } else {\r\n                    // we must maintain this flowers count, recycle old ones\r\n                    this.flowers[iF] = FlowersManager.createFlower(domainWidth, domainHeight);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        for (const flower of this.flowers) {\r\n            flower.update(dt, forceField);\r\n        }\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        const stems: Line[] = [];\r\n\r\n        for (const flower of this.flowers) {\r\n            stems.push(flower.getDrawableStem());\r\n        }\r\n\r\n        plotter.drawLines(stems, Parameters.linesColor);\r\n        for (const flower of this.flowers) {\r\n            flower.drawCorolla(plotter);\r\n        }\r\n    }\r\n\r\n    public resetPetalColors(): void {\r\n        for (const flower of this.flowers) {\r\n            flower.resetPetalColors();\r\n        }\r\n    }\r\n\r\n    private static createFlower(domainWidth: number, domainHeight: number): Flower {\r\n        const attachPoint: IPoint = {\r\n            x: domainWidth * Math.random(),\r\n            y: domainHeight,\r\n        };\r\n\r\n        const flowerLength = Noise.randomInRange(0.2, 0.8) * domainHeight;\r\n        return new Flower(attachPoint, flowerLength);\r\n    }\r\n}\r\n\r\nexport { FlowersManager };\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nclass ForceField {\r\n    private readonly fleeMouseEnabled: boolean;\r\n\r\n    public constructor(private readonly mousePosition: IPoint, private readonly maxInfluenceDistance: number) {\r\n        this.fleeMouseEnabled = Parameters.fleeMouse;\r\n    }\r\n\r\n    public computeForce(location: IPoint): IVector {\r\n        if (!this.fleeMouseEnabled) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const fromMouseX = location.x - this.mousePosition.x;\r\n        const fromMouseY = location.y - this.mousePosition.y;\r\n        const distanceToMouse = Math.sqrt(fromMouseX * fromMouseX + fromMouseY * fromMouseY);\r\n\r\n        if (distanceToMouse > this.maxInfluenceDistance) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const mouseInfluence = 0.5 + Math.cos(Math.PI * distanceToMouse / this.maxInfluenceDistance);\r\n        return {\r\n            x: mouseInfluence * mouseInfluence * fromMouseX / distanceToMouse,\r\n            y: mouseInfluence * mouseInfluence * fromMouseY / distanceToMouse,\r\n        };\r\n    }\r\n}\r\n\r\nexport { ForceField };\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport { downloadTextFile };\r\n","import { IVector } from \"./interfaces\";\r\n\r\nclass Noise {\r\n    private readonly period: number;\r\n    private time: number;\r\n\r\n    public last: IVector;\r\n    public next: IVector;\r\n\r\n    public constructor(period: number) {\r\n        this.period = period;\r\n        this.time = 0;\r\n        this.last = { x: 0, y: 0 };\r\n        this.next = { x: 0, y: 0 };\r\n\r\n        this.last = Noise.randomVector();\r\n        this.next = Noise.randomVector();\r\n    }\r\n\r\n    public compute(dt: number): IVector {\r\n        this.time += dt;\r\n        if (this.time > this.period) {\r\n            this.last = this.next;\r\n            this.next = Noise.randomVector();\r\n            this.time = this.time % this.period;\r\n        }\r\n\r\n        const r = this.time / this.period;\r\n        return {\r\n            x: this.last.x * (1 - r) + this.next.x * r,\r\n            y: this.last.y * (1 - r) + this.next.y * r,\r\n        };\r\n    }\r\n\r\n    public static randomInRange(from: number, to: number): number {\r\n        return from + (to - from) * Math.random();\r\n    }\r\n\r\n    private static randomVector(): IVector {\r\n        return { x: Math.random(), y: Math.random() };\r\n    }\r\n}\r\n\r\nexport { Noise };\r\n","import { IPoint } from \"./interfaces\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    FLOWERS_RANGE: \"flowers-range-id\",\r\n    WIND_RANGE: \"wind-range-id\",\r\n    SPEED_RANGE: \"speed-range-id\",\r\n    DAMPENING_RANGE: \"dampening-range-id\",\r\n    FLEE_MOUSE_CHECKBOX: \"flee-mouse-checkbox-id\",\r\n    RESET_BUTTON: \"reset-button-id\",\r\n    BACKGROUND_COLORPICKER: \"background-color-id\",\r\n    LINES_COLORPICKER: \"lines-color-id\",\r\n    SINGLE_PETAL_COLOR_CHECKBOX: \"single-petal-color-checkbox-id\",\r\n    PETAL_COLORPICKER: \"petal-color-id\",\r\n    DOWNLOAD_BUTTON: \"download-button-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype Observer = () => unknown;\r\nfunction callObservers(observers: Observer[]) {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst resetObservers: Observer[] = [];\r\nconst downloadObservers: Observer[] = [];\r\nconst petalColorChangeObservers: Observer[] = [];\r\n\r\ninterface IColorRGB {\r\n    r: number; // in [0, 255]\r\n    g: number; // in [0, 255]\r\n    b: number; // in [0, 255]\r\n}\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get mousePositionInPixels(): IPoint {\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        if (mousePosition.length === 2) {\r\n            const canvasSize = Page.Canvas.getSize();\r\n            return {\r\n                x: canvasSize[0] * mousePosition[0],\r\n                y: canvasSize[1] * mousePosition[1],\r\n            };\r\n        } else {\r\n            // handles a bug where mousePosition is empty when the page is initializing\r\n            return { x: 0, y: 0 };\r\n        }\r\n    }\r\n\r\n    public static get flowersDensity(): number {\r\n        return Page.Range.getValue(controlId.FLOWERS_RANGE) * 0.25;\r\n    }\r\n\r\n    public static get wind(): number {\r\n        return Page.Range.getValue(controlId.WIND_RANGE);\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE);\r\n    }\r\n\r\n    public static get dampening(): number {\r\n        return 1 - 0.01 * Page.Range.getValue(controlId.DAMPENING_RANGE);\r\n    }\r\n\r\n    public static get fleeMouse(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.FLEE_MOUSE_CHECKBOX);\r\n    }\r\n\r\n    public static addResetObserver(observer: Observer): void {\r\n        resetObservers.push(observer);\r\n    }\r\n\r\n    public static get backgroundColor(): string {\r\n        return Page.ColorPicker.getValueHex(controlId.BACKGROUND_COLORPICKER);\r\n    }\r\n\r\n    public static get linesColor(): string {\r\n        return Page.ColorPicker.getValueHex(controlId.LINES_COLORPICKER);\r\n    }\r\n\r\n    public static get singlePetalColor(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    }\r\n\r\n    public static get petalColor(): IColorRGB {\r\n        return Page.ColorPicker.getValue(controlId.PETAL_COLORPICKER) as IColorRGB;\r\n    }\r\n\r\n    public static addPetalColorChange(observer: Observer): void {\r\n        petalColorChangeObservers.push(observer);\r\n    }\r\n\r\n    public static addDownloadObserver(observer: Observer): void {\r\n        downloadObservers.push(observer);\r\n    }\r\n\r\n    private constructor() { }\r\n}\r\n\r\nfunction updatePetalColorsVisibility(): void {\r\n    const visible = Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    Page.Controls.setVisibility(controlId.PETAL_COLORPICKER, visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, updatePetalColorsVisibility);\r\nupdatePetalColorsVisibility();\r\n\r\nPage.Button.addObserver(controlId.RESET_BUTTON, () => {\r\n    callObservers(resetObservers);\r\n});\r\n\r\nPage.Button.addObserver(controlId.DOWNLOAD_BUTTON, () => {\r\n    callObservers(downloadObservers);\r\n});\r\n\r\nPage.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, () => {\r\n    callObservers(petalColorChangeObservers);\r\n});\r\nPage.ColorPicker.addObserver(controlId.PETAL_COLORPICKER, () => {\r\n    if (Parameters.singlePetalColor) {\r\n        callObservers(petalColorChangeObservers);\r\n    }\r\n});\r\n\r\nexport {\r\n    IColorRGB,\r\n    Parameters,\r\n};\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Line, Plotter } from \"./plotter\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nfunction ellipsePolyfill(this: CanvasRenderingContext2D, centerX: number, centerY: number, radiusX: number, radiusY: number) {\r\n    this.arc(centerX, centerY, Math.max(radiusX, radiusY), 0, 2 * Math.PI);\r\n}\r\n\r\nclass PlotterCanvas2D implements Plotter {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    public constructor() {\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public adjustToCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._width = this.canvas.clientWidth;\r\n        this._height = this.canvas.clientHeight;\r\n    }\r\n\r\n    public initialize(backgroundColor: string): void {\r\n        this.context.fillStyle = backgroundColor;\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawLines(lines: Line[], color: string): void {\r\n        if (lines.length >= 1) {\r\n            this.context.strokeStyle = color;\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.context.moveTo(line[0].x * this.cssPixel, line[0].y * this.cssPixel);\r\n                    for (let iP = 1; iP < line.length; iP++) {\r\n                        this.context.lineTo(line[iP].x * this.cssPixel, line[iP].y * this.cssPixel);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint, strokeColor: string, fillColor: string): void {\r\n        if (polygon.length >= 2) {\r\n            this.context.strokeStyle = strokeColor;\r\n            this.context.fillStyle = fillColor;\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            this.context.moveTo((polygon[0].x + offset.x) * this.cssPixel, (polygon[0].y + offset.y) * this.cssPixel);\r\n\r\n            for (let iP = 1; iP < polygon.length; iP++) {\r\n                this.context.lineTo((polygon[iP].x + offset.x) * this.cssPixel, (polygon[iP].y + offset.y) * this.cssPixel);\r\n            }\r\n\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public drawEllipsis(ellipsis: IEllipse[], color: string): void {\r\n        this.context.fillStyle = color;\r\n\r\n        if (typeof this.context.ellipse !== \"function\") {\r\n            this.context.ellipse = ellipsePolyfill;\r\n        }\r\n\r\n        for (const ellipse of ellipsis) {\r\n            this.context.beginPath();\r\n            this.context.ellipse(ellipse.center.x * this.cssPixel, ellipse.center.y * this.cssPixel, 0.5 * ellipse.width * this.cssPixel, 0.5 * ellipse.height * this.cssPixel, ellipse.orientation, 0, 2 * Math.PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas2D,\r\n};\r\n","import { Line, Plotter } from \"./plotter\";\r\nimport { IEllipse, IPoint } from \"../interfaces\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nfunction radianToDegree(radian: number) {\r\n    return 180 * radian / Math.PI;\r\n}\r\n\r\nclass PlotterSvg implements Plotter {\r\n    private readonly stringParts: string[];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    public constructor(width: number, height: number) {\r\n        this.stringParts = [];\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    public initialize(backgroundColor: string): void {\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this.width} ${this.height}\">`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this.width}\" height=\"${this.height}\"/>`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        this.stringParts.push(\"</svg>\");\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.stringParts.join(\"\\n\");\r\n    }\r\n\r\n    public drawLines(lines: Line[], color: string): void {\r\n        if (lines.length >= 1) {\r\n            this.stringParts.push(`\\t<g stroke=\"${color}\" stroke-width=\"1\" fill=\"none\">`);\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.stringParts.push(`\\t\\t<path d=\"${this.computePath(line)}\"/>`);\r\n                }\r\n            }\r\n\r\n            this.stringParts.push(`\\t</g>`);\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint, strokeColor: string, fillColor: string): void {\r\n        if (polygon.length >= 2) {\r\n            const transform = `translate(${offset.x.toFixed(1)} ${offset.y.toFixed(1)})`;\r\n            this.stringParts.push(`\\t<path d=\"${this.computePath(polygon)}Z\" stroke=\"${strokeColor}\" stroke-width=\"1\" fill=\"${fillColor}\" transform=\"${transform}\"/>`);\r\n        }\r\n    }\r\n\r\n    public drawEllipsis(ellipsis: IEllipse[], color: string): void {\r\n        if (ellipsis.length >= 1) {\r\n            this.stringParts.push(`\\t<g stroke=\"none\" fill=\"${color}\">`);\r\n            for (const ellipse of ellipsis) {\r\n                const transform = `translate(${ellipse.center.x.toFixed(1)} ${ellipse.center.y.toFixed(1)}) rotate(${radianToDegree(ellipse.orientation).toFixed(1)})`;\r\n                this.stringParts.push(`\\t\\t<ellipse cx=\"0\" cy=\"0\" rx=\"${(0.5 * ellipse.width).toFixed(1)}\" ry=\"${(0.5 * ellipse.height).toFixed(1)}\" transform=\"${transform}\"/>`);\r\n            }\r\n            this.stringParts.push(`\\t</g>`);\r\n        }\r\n    }\r\n\r\n    private computePath(line: Line): string {\r\n        const start = `M${line[0].x.toFixed(1)},${line[0].y.toFixed(1)}L`;\r\n\r\n        const pathParts: string[] = [];\r\n        for (let iP = 1; iP < line.length; iP++) {\r\n            pathParts.push(`${line[iP].x.toFixed(1)},${line[iP].y.toFixed(1)}`);\r\n        }\r\n\r\n        return start + pathParts.join(\" \");\r\n    }\r\n}\r\n\r\nexport { PlotterSvg };\r\n\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\n\r\ninterface IRopeNode {\r\n    pos: IPoint;\r\n    previousPos: IPoint;\r\n    acc: IVector;\r\n}\r\n\r\nfunction createRopeNode(x: number, y: number): IRopeNode {\r\n    return {\r\n        pos: { x, y },\r\n        previousPos: { x, y },\r\n        acc: { x: 0, y: 0 },\r\n    };\r\n}\r\n\r\nconst NB_ITERATIONS = 8;\r\n\r\nclass Rope {\r\n    public dampening: number = 1;\r\n\r\n    private readonly nodes: IRopeNode[];\r\n    private readonly segmentLength: number;\r\n    private readonly totalLength: number;\r\n\r\n    public constructor(startingPoint: IPoint, segmentLength: number, nbNodes: number) {\r\n        this.segmentLength = segmentLength;\r\n        this.totalLength = segmentLength * nbNodes;\r\n\r\n        this.nodes = [];\r\n        this.nodes.push(createRopeNode(startingPoint.x, startingPoint.y));\r\n        for (let iN = 0; iN < nbNodes; iN++) {\r\n            const angle = 2 * Math.PI * Math.random();\r\n            this.nodes.push(createRopeNode(\r\n                this.nodes[this.nodes.length - 1].pos.x + segmentLength * Math.cos(angle),\r\n                this.nodes[this.nodes.length - 1].pos.y + Math.abs(segmentLength * Math.sin(angle))\r\n            ));\r\n        }\r\n    }\r\n\r\n    public getDrawableLine(minSegmentLength: number): Line {\r\n        return this.computeSmoothLine(this.totalLength / minSegmentLength);\r\n    }\r\n\r\n    public update(dt: number, origin: IPoint, endAcceleration: IVector): void {\r\n        this.applyForces(endAcceleration);\r\n        this.applyVerlet(dt);\r\n\r\n        for (let i = 0; i < NB_ITERATIONS; i++) {\r\n            this.applyConstraints(origin);\r\n        }\r\n    }\r\n\r\n    public get endPosition(): IPoint {\r\n        return this.nodes[this.nodes.length - 1].pos;\r\n    }\r\n\r\n    public get highestPoint(): number {\r\n        let highest = 1000000;\r\n        for (const node of this.nodes) {\r\n            if (node.pos.y < highest) {\r\n                highest = node.pos.y;\r\n            }\r\n        }\r\n        return highest;\r\n    }\r\n\r\n    private applyForces(endAcceleration: IVector): void {\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            this.nodes[iN].acc.x = 0;\r\n            this.nodes[iN].acc.y = 0;\r\n        }\r\n\r\n        this.nodes[this.nodes.length - 1].acc.x += endAcceleration.x;\r\n        this.nodes[this.nodes.length - 1].acc.y += endAcceleration.y;\r\n    }\r\n\r\n    private applyVerlet(dt: number): void {\r\n        for (const node of this.nodes) {\r\n            // CURRENT_VELOCITY = (CURRENT_POSITION - PREVIOUS_POSITION) / DT\r\n            // NEW_VELOCITY = DAMPENING * CURRENT_VELOCITY + CURRENT_ACCELERATION * DT\r\n            // NEW_POSITION = CURRENT_POSITION + NEW_VELOCITY * DT\r\n\r\n            const newPosX = node.pos.x + this.dampening * (node.pos.x - node.previousPos.x) + dt * dt * node.acc.x;\r\n            const newPosY = node.pos.y + this.dampening * (node.pos.y - node.previousPos.y) + dt * dt * node.acc.y;\r\n\r\n            node.previousPos.x = node.pos.x;\r\n            node.previousPos.y = node.pos.y;\r\n            node.pos.x = newPosX;\r\n            node.pos.y = newPosY;\r\n        }\r\n    }\r\n\r\n    private applyConstraints(origin: IPoint): void {\r\n        const EPSILON = 0.000001;\r\n        this.nodes[0].pos.x = origin.x;\r\n        this.nodes[0].pos.y = origin.y;\r\n\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            const dX = this.nodes[iN].pos.x - this.nodes[iN - 1].pos.x;\r\n            const dY = this.nodes[iN].pos.y - this.nodes[iN - 1].pos.y;\r\n            const distanceToPrevious = Math.sqrt(dX * dX + dY * dY);\r\n            const correction = 0.5 * (1 - this.segmentLength / (distanceToPrevious + EPSILON));\r\n            const correctionX = dX * correction;\r\n            const correctionY = dY * correction;\r\n\r\n            this.nodes[iN].pos.x -= correctionX;\r\n            this.nodes[iN].pos.y -= correctionY;\r\n            this.nodes[iN - 1].pos.x += correctionX;\r\n            this.nodes[iN - 1].pos.y += correctionY;\r\n        }\r\n    }\r\n\r\n    private computeSmoothLine(minimumPoints: number): IPoint[] {\r\n        let points: IPoint[] = [];\r\n        for (const node of this.nodes) {\r\n            points.push(node.pos);\r\n        }\r\n\r\n        while (points.length < minimumPoints) {\r\n            points = Rope.subdivideLine(points, 0.333);\r\n        }\r\n        return points;\r\n    }\r\n\r\n    // Chaikin\r\n    private static subdivideLine(sourcePoints: IPoint[], ratio: number): IPoint[] {\r\n        const newPoints: IPoint[] = [];\r\n        newPoints.push(sourcePoints[0]);\r\n\r\n        for (let iP = 0; iP < sourcePoints.length - 1; iP++) {\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * (1 - ratio) + sourcePoints[iP + 1].x * ratio,\r\n                y: sourcePoints[iP].y * (1 - ratio) + sourcePoints[iP + 1].y * ratio,\r\n            });\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * ratio + sourcePoints[iP + 1].x * (1 - ratio),\r\n                y: sourcePoints[iP].y * ratio + sourcePoints[iP + 1].y * (1 - ratio),\r\n            });\r\n        }\r\n\r\n        newPoints.push(sourcePoints[sourcePoints.length - 1]);\r\n        return newPoints;\r\n    }\r\n}\r\n\r\nexport { Rope };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FlowersManager } from \"./flowers-manager\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { downloadTextFile } from \"./helpers\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Plotter } from \"./plotting/plotter\";\r\nimport { PlotterCanvas2D } from \"./plotting/plotter-canvas-2d\";\r\nimport { PlotterSvg } from \"./plotting/plotter-svg\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(flowersManager: FlowersManager, plotter: Plotter): void {\r\n    plotter.initialize(Parameters.backgroundColor);\r\n    flowersManager.draw(plotter);\r\n    plotter.finalize();\r\n}\r\n\r\nfunction main() {\r\n    const plotter = new PlotterCanvas2D();\r\n    const flowersManager = new FlowersManager();\r\n\r\n    Parameters.addResetObserver(() => { flowersManager.reset(); });\r\n    Parameters.addDownloadObserver(() => { exportAsSvg(flowersManager, plotter.width, plotter.height); });\r\n    Parameters.addPetalColorChange(() => { flowersManager.resetPetalColors(); });\r\n\r\n    const maxDt = 1 / 60;\r\n    let lastUpdate = performance.now();\r\n    function mainLoop() {\r\n        const now = performance.now();\r\n        const dt = Parameters.speed * Math.min(maxDt, 0.001 * (now - lastUpdate));\r\n        lastUpdate = now;\r\n\r\n        plotter.adjustToCanvas();\r\n\r\n        flowersManager.manage(plotter.width, plotter.height);\r\n\r\n        const forceField = new ForceField(Parameters.mousePositionInPixels, 500);\r\n        flowersManager.update(dt, forceField);\r\n\r\n        plot(flowersManager, plotter);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nfunction exportAsSvg(flowersManager: FlowersManager, width: number, height: number): void {\r\n    const plotter = new PlotterSvg(width, height);\r\n    plot(flowersManager, plotter);\r\n\r\n    const svgText = plotter.toString();\r\n    downloadTextFile(\"flowers.svg\", svgText);\r\n}\r\n\r\nmain();\r\n"],"sourceRoot":""}