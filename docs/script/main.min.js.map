{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://flowers-webgl/./src/ts/corolla.ts","webpack://flowers-webgl/./src/ts/flower.ts","webpack://flowers-webgl/./src/ts/flowers-manager.ts","webpack://flowers-webgl/./src/ts/force-field.ts","webpack://flowers-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://flowers-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://flowers-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://flowers-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://flowers-webgl/./src/ts/gl-utils/shader.ts","webpack://flowers-webgl/./src/ts/helpers.ts","webpack://flowers-webgl/./src/ts/noise.ts","webpack://flowers-webgl/./src/ts/parameters.ts","webpack://flowers-webgl/./src/ts/plotting/color.ts","webpack://flowers-webgl/./src/ts/plotting/plotter-canvas-2d.ts","webpack://flowers-webgl/./src/ts/plotting/plotter-canvas-base.ts","webpack://flowers-webgl/./src/ts/plotting/plotter-canvas-webgl.ts","webpack://flowers-webgl/./src/ts/plotting/plotter-svg.ts","webpack://flowers-webgl/./src/ts/plotting/plotter.ts","webpack://flowers-webgl/./src/ts/rope.ts","webpack://flowers-webgl/webpack/bootstrap","webpack://flowers-webgl/./src/ts/main.ts"],"sourcesContent":["import { ForceField } from \"./force-field\";\r\nimport { IEllipse, IPoint, IVector } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Color } from \"./plotting/color\";\r\nimport { Plotter } from \"./plotting/plotter\";\r\n\r\n\r\ninterface IPetal extends IEllipse {\r\n    petalArea: number;\r\n    rotationSpeed: number;\r\n}\r\n\r\nfunction randomColor(): Color {\r\n    const random = Noise.randomInRange(0, 3);\r\n    const randomChannel = Math.floor(0.5 * 255 * (random % 1));\r\n\r\n    if (random < 1) {\r\n        return new Color(255, 0, 255 - randomChannel);\r\n    } else if (random < 2) {\r\n        return new Color(255, randomChannel, 0);\r\n    } else if (random < 3) {\r\n        return new Color(255 - randomChannel, 255, 0);\r\n    } else if (random < 4) {\r\n        return new Color(0, 255, randomChannel);\r\n    } else if (random < 5) {\r\n        return new Color(0, 255 - randomChannel, 255);\r\n    } else {\r\n        return new Color(randomChannel, 0, 255);\r\n    }\r\n}\r\n\r\nclass Corolla {\r\n    public readonly position: IPoint; // readonly because attachedPetals reference it\r\n\r\n    private readonly color: Color;\r\n    private readonly initialPetalsCount: number;\r\n    private readonly attachedPetals: IPetal[];\r\n    private readonly floatingPetals: IPetal[];\r\n    private readonly outline: IPoint[];\r\n\r\n    private readonly noise: Noise;\r\n\r\n    private readonly maxLiftingForce: number;\r\n\r\n    private wind: IVector;\r\n\r\n    public constructor() {\r\n        this.position = { x: 0, y: 0 };\r\n        this.color = randomColor();\r\n        this.initialPetalsCount = Parameters.petalsCount;\r\n        this.attachedPetals = this.computePetals(this.initialPetalsCount);\r\n        this.floatingPetals = [];\r\n        this.outline = Corolla.computeOutline(40, 20);\r\n\r\n        this.noise = new Noise(Noise.randomInRange(1, 2));\r\n        this.maxLiftingForce = Noise.randomInRange(5000, 8000);\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        if (this.attachedPetals.length > 0 && Math.random() < this.petalsDropRate * dt) {\r\n            const detachedPetal = this.attachedPetals.pop();\r\n            detachedPetal.center = { x: this.position.x, y: this.position.y };\r\n            detachedPetal.rotationSpeed = Noise.randomInRange(-1.5, 1.5);\r\n            this.floatingPetals.push(detachedPetal);\r\n        }\r\n\r\n        for (const detachedPetal of this.floatingPetals) {\r\n            detachedPetal.center.y -= 0.05 * detachedPetal.petalArea * dt;\r\n            detachedPetal.orientation += detachedPetal.rotationSpeed * dt;\r\n        }\r\n        this.trimFloatingPetals();\r\n\r\n        this.wind = this.noise.compute(dt);\r\n        this.wind.x = Parameters.wind * 10000 * (this.wind.x - 0.5);\r\n        this.wind.y = 1000 * (this.wind.y - 0.5);\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        this.drawOutline(plotter);\r\n        this.drawPetals(plotter);\r\n    }\r\n\r\n    public getAcceleration(forceField: ForceField): IVector {\r\n        let strength = 0.75;\r\n        if (this.initialPetalsCount > 0) {\r\n            strength = Math.pow(this.attachedPetals.length / this.initialPetalsCount, 0.25);\r\n        }\r\n\r\n        const acceleration: IVector = { x: 0, y: 0 };\r\n        acceleration.x += this.wind.x * strength;\r\n        acceleration.y += this.wind.y;\r\n\r\n        const GRAVITY = 3000;\r\n        acceleration.y += GRAVITY - this.maxLiftingForce * strength;\r\n\r\n        const fieldForce = forceField.computeForce(this.position);\r\n        acceleration.x += strength * 2000 * fieldForce.x;\r\n        acceleration.y += strength * 2000 * fieldForce.y;\r\n\r\n        return acceleration;\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        if (Parameters.petalsCount > 0) {\r\n            return this.attachedPetals.length <= 0 && this.floatingPetals.length <= 0 && this.position.y > lowestAllowed + 50;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private drawPetals(plotter: Plotter): void {\r\n        const allPetals = this.attachedPetals.concat(this.floatingPetals);\r\n        const color = Parameters.singlePetalColor ? Parameters.petalColor : this.color;\r\n        plotter.drawEllipses(allPetals, color);\r\n    }\r\n\r\n    private drawOutline(plotter: Plotter): void {\r\n        plotter.drawPolygon(this.outline, this.position);\r\n    }\r\n\r\n    private trimFloatingPetals(): void {\r\n        for (let iP = this.floatingPetals.length - 1; iP >= 0; iP--) {\r\n            const highestPoint = this.floatingPetals[iP].center.y + 0.5 * Math.max(this.floatingPetals[iP].width, this.floatingPetals[iP].height);\r\n            if (highestPoint < 0) {\r\n                this.floatingPetals.splice(iP, 1);\r\n                iP--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private computePetals(nbPetals: number): IPetal[] {\r\n        const result: IPetal[] = [];\r\n\r\n        for (let i = 0; i < nbPetals; i++) {\r\n            const width = Noise.randomInRange(50, 70);\r\n            const proportions = Noise.randomInRange(0.3, 0.7);\r\n            const height = proportions * width;\r\n            const orientation = Noise.randomInRange(0, 2 * Math.PI);\r\n\r\n            result.push({\r\n                width,\r\n                height,\r\n                orientation,\r\n                center: this.position,\r\n                petalArea: width * height,\r\n                rotationSpeed: 0,\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private get petalsDropRate(): number {\r\n        return 0.5 * Parameters.petalsDroprate * 0.1 * this.initialPetalsCount;\r\n    }\r\n\r\n    private static computeOutline(outlineNbPoints: number, outlineRadius: number): IPoint[] {\r\n        const result: IPoint[] = [];\r\n\r\n        for (let i = 0; i < outlineNbPoints; i++) {\r\n            const angle = 2 * Math.PI * i / (outlineNbPoints - 1);\r\n            const radius = outlineRadius * Noise.randomInRange(1, 1.3);\r\n            result.push({\r\n                x: radius * Math.cos(angle),\r\n                y: radius * Math.sin(angle),\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { Corolla };\r\n\r\n","import { Corolla } from \"./corolla\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\nimport { Rope } from \"./rope\";\r\n\r\n\r\nclass Flower {\r\n    public static readonly maxSegmentLength: number = 20;\r\n\r\n    private readonly attachPoint: IPoint;\r\n    private readonly stem: Rope;\r\n    private readonly corolla: Corolla;\r\n\r\n    public constructor(attachPoint: IPoint, length: number) {\r\n        this.attachPoint = attachPoint;\r\n\r\n        const nbNodes = Math.max(length / Flower.maxSegmentLength);\r\n        this.stem = new Rope(attachPoint, length / nbNodes, nbNodes);\r\n\r\n        this.corolla = new Corolla();\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        this.corolla.update(dt);\r\n        const corollaAcceleration = this.corolla.getAcceleration(forceField);\r\n        this.stem.dampening = Parameters.dampening;\r\n        this.stem.update(dt, this.attachPoint, corollaAcceleration);\r\n        this.attachCorolla();\r\n    }\r\n\r\n    public getDrawableStem(): Line {\r\n        return this.stem.getDrawableLine(5);\r\n    }\r\n\r\n    public drawCorolla(plotter: Plotter): void {\r\n        this.corolla.draw(plotter);\r\n    }\r\n\r\n    public isDead(lowestAllowed: number): boolean {\r\n        return this.corolla.isDead(lowestAllowed) && this.stem.highestPoint >= lowestAllowed;\r\n    }\r\n\r\n    private attachCorolla(): void {\r\n        this.corolla.position.x = this.stem.endPosition.x;\r\n        this.corolla.position.y = this.stem.endPosition.y;\r\n    }\r\n}\r\n\r\nexport { Flower };\r\n\r\n","import { Flower } from \"./flower\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { IPoint } from \"./interfaces\";\r\nimport { Noise } from \"./noise\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Line, Plotter } from \"./plotting/plotter\";\r\n\r\n\r\nclass FlowersManager {\r\n    private readonly flowers: Flower[];\r\n\r\n    public constructor() {\r\n        this.flowers = [];\r\n    }\r\n\r\n    public reset(): void {\r\n        this.flowers.length = 0;\r\n    }\r\n\r\n    public manage(domainWidth: number, domainHeight: number): void {\r\n        let idealNumberOfFlowers = Math.round(domainWidth * Parameters.flowersDensity);\r\n        if (idealNumberOfFlowers <= 0) {\r\n            idealNumberOfFlowers = 1;\r\n        }\r\n\r\n        // create new flowers if needed\r\n        while (this.flowers.length < idealNumberOfFlowers) {\r\n            const newFlower = FlowersManager.createFlower(domainWidth, domainHeight);\r\n            this.flowers.push(newFlower);\r\n        }\r\n\r\n        // handle old flowers\r\n        for (let iF = this.flowers.length - 1; iF >= 0; iF--) {\r\n            if (this.flowers[iF].isDead(domainHeight)) {\r\n                if (this.flowers.length > idealNumberOfFlowers) {\r\n                    // we have too many flowers already, kill old ones\r\n                    this.flowers.splice(iF, 1);\r\n                    iF--;\r\n                } else {\r\n                    // we must maintain this flowers count, recycle old ones\r\n                    this.flowers[iF] = FlowersManager.createFlower(domainWidth, domainHeight);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public update(dt: number, forceField: ForceField): void {\r\n        for (const flower of this.flowers) {\r\n            flower.update(dt, forceField);\r\n        }\r\n    }\r\n\r\n    public draw(plotter: Plotter): void {\r\n        const stems: Line[] = [];\r\n\r\n        for (const flower of this.flowers) {\r\n            stems.push(flower.getDrawableStem());\r\n        }\r\n\r\n        plotter.drawLines(stems);\r\n        for (const flower of this.flowers) {\r\n            flower.drawCorolla(plotter);\r\n        }\r\n    }\r\n\r\n    private static createFlower(domainWidth: number, domainHeight: number): Flower {\r\n        const attachPoint: IPoint = {\r\n            x: domainWidth * Math.random(),\r\n            y: domainHeight,\r\n        };\r\n\r\n        const flowerLength = Noise.randomInRange(0.2, 0.8) * domainHeight;\r\n        return new Flower(attachPoint, flowerLength);\r\n    }\r\n}\r\n\r\nexport { FlowersManager };\r\n\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\n\r\nclass ForceField {\r\n    private readonly fleeMouseEnabled: boolean;\r\n\r\n    public constructor(private readonly mousePosition: IPoint, private readonly maxInfluenceDistance: number) {\r\n        this.fleeMouseEnabled = Parameters.fleeMouse;\r\n    }\r\n\r\n    public computeForce(location: IPoint): IVector {\r\n        if (!this.fleeMouseEnabled) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const fromMouseX = location.x - this.mousePosition.x;\r\n        const fromMouseY = location.y - this.mousePosition.y;\r\n        const distanceToMouse = Math.sqrt(fromMouseX * fromMouseX + fromMouseY * fromMouseY);\r\n\r\n        if (distanceToMouse > this.maxInfluenceDistance) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        const mouseInfluence = 0.5 + Math.cos(Math.PI * distanceToMouse / this.maxInfluenceDistance);\r\n        return {\r\n            x: mouseInfluence * mouseInfluence * fromMouseX / distanceToMouse,\r\n            y: mouseInfluence * mouseInfluence * fromMouseY / distanceToMouse,\r\n        };\r\n    }\r\n}\r\n\r\nexport { ForceField };\r\n\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\((.*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean)  => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"./shaders/\" + filename, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof (window.navigator as any).msSaveBlob !== \"undefined\") { // for IE\r\n        (window.navigator as any).msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport { downloadTextFile };\r\n","import { IVector } from \"./interfaces\";\r\n\r\nclass Noise {\r\n    private readonly period: number;\r\n    private time: number;\r\n\r\n    public last: IVector;\r\n    public next: IVector;\r\n\r\n    public constructor(period: number) {\r\n        this.period = period;\r\n        this.time = 0;\r\n        this.last = { x: 0, y: 0 };\r\n        this.next = { x: 0, y: 0 };\r\n\r\n        this.last = Noise.randomVector();\r\n        this.next = Noise.randomVector();\r\n    }\r\n\r\n    public compute(dt: number): IVector {\r\n        this.time += dt;\r\n        if (this.time > this.period) {\r\n            this.last = this.next;\r\n            this.next = Noise.randomVector();\r\n            this.time = this.time % this.period;\r\n        }\r\n\r\n        const r = this.time / this.period;\r\n        return {\r\n            x: this.last.x * (1 - r) + this.next.x * r,\r\n            y: this.last.y * (1 - r) + this.next.y * r,\r\n        };\r\n    }\r\n\r\n    public static randomInRange(from: number, to: number): number {\r\n        return from + (to - from) * Math.random();\r\n    }\r\n\r\n    private static randomVector(): IVector {\r\n        return { x: Math.random(), y: Math.random() };\r\n    }\r\n}\r\n\r\nexport { Noise };\r\n","import { IPoint } from \"./interfaces\";\r\nimport { Color } from \"./plotting/color\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    FLOWERS_RANGE: \"flowers-range-id\",\r\n    PETALS_COUNT_RANGE: \"petals-count-range-id\",\r\n    PETALS_DROPRATE_CHANGE: \"petals-droprate-range-id\",\r\n    WIND_RANGE: \"wind-range-id\",\r\n    SPEED_RANGE: \"speed-range-id\",\r\n    DAMPENING_RANGE: \"dampening-range-id\",\r\n    FLEE_MOUSE_CHECKBOX: \"flee-mouse-checkbox-id\",\r\n    RESET_BUTTON: \"reset-button-id\",\r\n    BACKGROUND_COLORPICKER: \"background-color-id\",\r\n    LINES_COLORPICKER: \"lines-color-id\",\r\n    PETALS_OPACITY: \"petals-opacity-range-id\",\r\n    SINGLE_PETAL_COLOR_CHECKBOX: \"single-petal-color-checkbox-id\",\r\n    PETAL_COLORPICKER: \"petal-color-id\",\r\n    DOWNLOAD_BUTTON: \"download-button-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype Observer = () => unknown;\r\nfunction callObservers(observers: Observer[]) {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst resetObservers: Observer[] = [];\r\nconst downloadObservers: Observer[] = [];\r\n\r\nfunction callResetObservers(): void {\r\n    callObservers(resetObservers);\r\n}\r\n\r\nfunction getColor(id: string): Color {\r\n    const rgb = Page.ColorPicker.getValue(id);\r\n    return new Color(rgb.r, rgb.g, rgb.b);\r\n}\r\n\r\nlet backgroundColor: Color = getColor(controlId.BACKGROUND_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.BACKGROUND_COLORPICKER, () => { backgroundColor = getColor(controlId.BACKGROUND_COLORPICKER); });\r\n\r\nlet linesColor: Color = getColor(controlId.LINES_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.LINES_COLORPICKER, () => { linesColor = getColor(controlId.LINES_COLORPICKER); });\r\n\r\nlet petalsColor: Color = getColor(controlId.PETAL_COLORPICKER);\r\nPage.ColorPicker.addObserver(controlId.PETAL_COLORPICKER, () => { petalsColor = getColor(controlId.PETAL_COLORPICKER); });\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get mousePositionInPixels(): IPoint {\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        if (mousePosition.length === 2) {\r\n            const canvasSize = Page.Canvas.getSize();\r\n            return {\r\n                x: canvasSize[0] * mousePosition[0],\r\n                y: canvasSize[1] * mousePosition[1],\r\n            };\r\n        } else {\r\n            // handles a bug where mousePosition is empty when the page is initializing\r\n            return { x: 0, y: 0 };\r\n        }\r\n    }\r\n\r\n    public static get flowersDensity(): number {\r\n        return Page.Range.getValue(controlId.FLOWERS_RANGE) * 0.25;\r\n    }\r\n\r\n    public static get petalsCount(): number {\r\n        return Page.Range.getValue(controlId.PETALS_COUNT_RANGE);\r\n    }\r\n\r\n    public static get petalsDroprate(): number {\r\n        return Page.Range.getValue(controlId.PETALS_DROPRATE_CHANGE);\r\n    }\r\n\r\n    public static get wind(): number {\r\n        return Page.Range.getValue(controlId.WIND_RANGE);\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE);\r\n    }\r\n\r\n    public static get dampening(): number {\r\n        return 1 - 0.01 * Page.Range.getValue(controlId.DAMPENING_RANGE);\r\n    }\r\n\r\n    public static get fleeMouse(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.FLEE_MOUSE_CHECKBOX);\r\n    }\r\n\r\n    public static addResetObserver(observer: Observer): void {\r\n        resetObservers.push(observer);\r\n    }\r\n\r\n    public static get backgroundColor(): Color {\r\n        return backgroundColor;\r\n    }\r\n\r\n    public static get linesColor(): Color {\r\n        return linesColor;\r\n    }\r\n\r\n    public static get petalsOpacity(): number {\r\n        return Page.Range.getValue(controlId.PETALS_OPACITY);\r\n    }\r\n\r\n    public static get singlePetalColor(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    }\r\n\r\n    public static get petalColor(): Color {\r\n        return petalsColor;\r\n    }\r\n\r\n    public static addDownloadObserver(observer: Observer): void {\r\n        downloadObservers.push(observer);\r\n    }\r\n\r\n    public static get useCanvas2D(): boolean {\r\n        const lowercaseUrl = window.location.href.toLowerCase();\r\n        return lowercaseUrl.indexOf(\"plotter=canvas2d\") >= 0;\r\n    }\r\n\r\n    private constructor() { }\r\n}\r\n\r\nfunction updatePetalColorsVisibility(): void {\r\n    const visible = Page.Checkbox.isChecked(controlId.SINGLE_PETAL_COLOR_CHECKBOX);\r\n    Page.Controls.setVisibility(controlId.PETAL_COLORPICKER, visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.SINGLE_PETAL_COLOR_CHECKBOX, updatePetalColorsVisibility);\r\nupdatePetalColorsVisibility();\r\n\r\nPage.Button.addObserver(controlId.RESET_BUTTON, callResetObservers);\r\nPage.Range.addLazyObserver(controlId.PETALS_COUNT_RANGE, callResetObservers);\r\nPage.Canvas.Observers.canvasResize.push(callResetObservers);\r\n\r\nPage.FileControl.addDownloadObserver(controlId.DOWNLOAD_BUTTON, () => {\r\n    callObservers(downloadObservers);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n\r\n","class Color {\r\n    public readonly r: number; // integer in [0,255]\r\n    public readonly g: number; // integer in [0,255]\r\n    public readonly b: number; // integer in [0,255]\r\n\r\n    public readonly rNormalized: number; // in [0,1]\r\n    public readonly gNormalized: number; // in [0,1]\r\n    public readonly bNormalized: number; // in [0,1]\r\n\r\n    public constructor(r: number, g: number, b: number) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n\r\n        this.rNormalized = r /255;\r\n        this.gNormalized = g /255;\r\n        this.bNormalized = b /255;\r\n    }\r\n\r\n    public toStringRGB(): string {\r\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n    }\r\n\r\n    /**\r\n     * @param alpha in [0, 1]\r\n     */\r\n    public toStringRGBA(alpha: number): string {\r\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${alpha})`;\r\n    }\r\n}\r\n\r\nexport { Color };\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\nimport { Line } from \"./plotter\";\r\nimport { PlotterCanvas } from \"./plotter-canvas-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nfunction ellipsePolyfill(this: CanvasRenderingContext2D, centerX: number, centerY: number, radiusX: number, radiusY: number) {\r\n    this.arc(centerX, centerY, Math.max(radiusX, radiusY), 0, 2 * Math.PI);\r\n}\r\n\r\nclass PlotterCanvas2D extends PlotterCanvas {\r\n    private readonly context: CanvasRenderingContext2D;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n    }\r\n\r\n    protected initializeInternal(): void {\r\n        this.context.fillStyle = this.fillColor.toStringRGB();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        if (lines.length >= 1) {\r\n            this.context.strokeStyle = this.lineColor.toStringRGB();\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.context.moveTo(line[0].x * this.cssPixel, line[0].y * this.cssPixel);\r\n                    for (let iP = 1; iP < line.length; iP++) {\r\n                        this.context.lineTo(line[iP].x * this.cssPixel, line[iP].y * this.cssPixel);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length >= 2) {\r\n            this.context.fillStyle = this.fillColor.toStringRGB();\r\n            this.context.lineWidth = 1; // do not adapt with cssPixel for performance reasons on mobile devices\r\n\r\n            this.context.beginPath();\r\n\r\n            this.context.moveTo((polygon[0].x + offset.x) * this.cssPixel, (polygon[0].y + offset.y) * this.cssPixel);\r\n\r\n            for (let iP = 1; iP < polygon.length; iP++) {\r\n                this.context.lineTo((polygon[iP].x + offset.x) * this.cssPixel, (polygon[iP].y + offset.y) * this.cssPixel);\r\n            }\r\n\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        this.context.fillStyle = color.toStringRGBA(this.ellipseOpacity);\r\n\r\n        if (typeof this.context.ellipse !== \"function\") {\r\n            this.context.ellipse = ellipsePolyfill;\r\n        }\r\n\r\n        for (const ellipse of ellipses) {\r\n            this.context.beginPath();\r\n            this.context.ellipse(ellipse.center.x * this.cssPixel, ellipse.center.y * this.cssPixel, 0.5 * ellipse.width * this.cssPixel, 0.5 * ellipse.height * this.cssPixel, ellipse.orientation, 0, 2 * Math.PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas2D,\r\n};\r\n\r\n","import { Plotter } from \"./plotter\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nabstract class PlotterCanvas extends Plotter {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected readonly cssPixel: number;\r\n\r\n    public _width: number;\r\n    public _height: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.adjustToCanvas();\r\n    }\r\n\r\n    public adjustToCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._width = this.canvas.clientWidth;\r\n        this._height = this.canvas.clientHeight;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas,\r\n};\r\n\r\n","import { gl, initGL } from \"../gl-utils/gl-canvas\";\r\nimport { Shader } from \"../gl-utils/shader\";\r\nimport * as ShaderManager from \"../gl-utils/shader-manager\";\r\n\r\nimport { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\nimport { Line } from \"./plotter\";\r\nimport { PlotterCanvas } from \"./plotter-canvas-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nenum EBatchType {\r\n    LINES,\r\n    POLYGONS,\r\n    ELLIPSES,\r\n}\r\n\r\ninterface IBatch {\r\n    type: EBatchType;\r\n    batchId: number;\r\n}\r\n\r\ninterface ILinesBatch extends IBatch {\r\n    type: EBatchType.LINES;\r\n    lines: Line[];\r\n    nbSegments: number;\r\n}\r\n\r\ninterface IEllipsesBatch extends IBatch {\r\n    type: EBatchType.ELLIPSES;\r\n    ellipsesList: IEllipse[];\r\n    color: Color;\r\n}\r\n\r\ninterface IPolygonsBatch extends IBatch {\r\n    outline: IPoint[];\r\n    center: IPoint;\r\n}\r\n\r\nfunction loadShader(name: string, callback: (loadedShader: Shader) => unknown): void {\r\n    ShaderManager.buildShader({\r\n        vertexFilename: `${name}.vert`,\r\n        fragmentFilename: `${name}.frag`,\r\n        injected: {},\r\n    }, (builtShader: Shader | null) => {\r\n        if (builtShader === null) {\r\n            const errorMessage = `Failed to load or build the ${name} shader.`;\r\n            Page.Demopage.setErrorMessage(`shader-${name}`, errorMessage);\r\n            throw new Error(errorMessage);\r\n        }\r\n        callback(builtShader);\r\n    });\r\n}\r\n\r\n/* tslint:disable no-string-literal */\r\nclass PlotterCanvasWebGL extends PlotterCanvas {\r\n    private linesShader: Shader;\r\n    private readonly linesVBOId: WebGLBuffer;\r\n\r\n    private ellipsesShader: Shader;\r\n    private readonly ellipsesVBOId: WebGLBuffer;\r\n\r\n    private polygonsShader: Shader;\r\n    private readonly corollaVBOId: WebGLBuffer;\r\n    private readonly corollaIndexVBOId: WebGLBuffer;\r\n\r\n    private batches: IBatch[];\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        if (!initGL()) {\r\n            throw new Error(\"Failed to initialize WebGL.\");\r\n        }\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.clearDepth(1);\r\n\r\n        this.linesVBOId = gl.createBuffer();\r\n        this.ellipsesVBOId = gl.createBuffer();\r\n        this.corollaVBOId = gl.createBuffer();\r\n        this.corollaIndexVBOId = gl.createBuffer();\r\n\r\n        loadShader(\"lines\", (shader: Shader) => { this.linesShader = shader; });\r\n        loadShader(\"ellipses\", (shader: Shader) => { this.ellipsesShader = shader; });\r\n        loadShader(\"polygons\", (shader: Shader) => { this.polygonsShader = shader; });\r\n    }\r\n\r\n    public initializeInternal(): void {\r\n        gl.viewport(0, 0, this.width * this.cssPixel, this.height * this.cssPixel);\r\n        gl.clearColor(this.fillColor.rNormalized, this.fillColor.gNormalized, this.fillColor.bNormalized, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // tslint:disable-line no-bitwise\r\n\r\n        this.batches = [];\r\n    }\r\n\r\n    // tslint:disable-next-line no-empty\r\n    public finalize(): void {\r\n        const linesBatch: ILinesBatch[] = [];\r\n        const polygonsBatch: IPolygonsBatch[] = [];\r\n        const ellipsesBatch: IEllipsesBatch[] = [];\r\n\r\n        for (const batch of this.batches) {\r\n            if (batch.type === EBatchType.LINES) {\r\n                linesBatch.push(batch as ILinesBatch);\r\n            } else if (batch.type === EBatchType.POLYGONS) {\r\n                polygonsBatch.push(batch as IPolygonsBatch);\r\n            } else if (batch.type === EBatchType.ELLIPSES) {\r\n                ellipsesBatch.push(batch as IEllipsesBatch);\r\n            }\r\n        }\r\n\r\n        if (linesBatch.length > 0) {\r\n            this.drawLinesBatches(linesBatch);\r\n        }\r\n\r\n        gl.depthMask(true); // write to depth buffer\r\n        if (polygonsBatch.length > 0) {\r\n            this.drawPolygonsBatches(polygonsBatch);\r\n        }\r\n\r\n        gl.depthMask(false); // don't write to depth buffer because ellipses are not opaque\r\n        if (ellipsesBatch.length > 0) {\r\n            this.drawEllipseBatches(ellipsesBatch);\r\n        }\r\n        this.batches = [];\r\n    }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        const nonTrivalLines: Line[] = [];\r\n\r\n        let nbSegments = 0;\r\n        for (const line of lines) {\r\n            if (line.length >= 2) {\r\n                nbSegments += line.length - 1;\r\n                nonTrivalLines.push(line);\r\n            }\r\n        }\r\n\r\n        if (nonTrivalLines.length > 0) {\r\n            const linesBatch: ILinesBatch = {\r\n                type: EBatchType.LINES,\r\n                lines: nonTrivalLines,\r\n                nbSegments,\r\n                batchId: this.batches.length,\r\n            };\r\n\r\n            this.batches.push(linesBatch);\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length > 0) {\r\n            const outline: IPoint[] = [];\r\n            for (const point of polygon) {\r\n                outline.push({\r\n                    x: point.x + offset.x,\r\n                    y: point.y + offset.y,\r\n                });\r\n            }\r\n\r\n            const polygonBatch: IPolygonsBatch = {\r\n                type: EBatchType.POLYGONS,\r\n                outline,\r\n                center: offset,\r\n                batchId: this.batches.length,\r\n            };\r\n            this.batches.push(polygonBatch);\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        if (ellipses.length > 0) {\r\n            const ellipsesBatch: IEllipsesBatch = {\r\n                type: EBatchType.ELLIPSES,\r\n                ellipsesList: ellipses,\r\n                color,\r\n                batchId: this.batches.length,\r\n            };\r\n            this.batches.push(ellipsesBatch);\r\n        }\r\n    }\r\n\r\n    private drawLinesBatches(batches: ILinesBatch[]) {\r\n        if (this.linesShader) {\r\n            let totalNbSegments = 0;\r\n            for (const batch of batches) {\r\n                totalNbSegments += batch.nbSegments;\r\n            }\r\n\r\n            const buffer = new Float32Array(2 * 2 * totalNbSegments);\r\n            {\r\n                let i = 0;\r\n                for (const batch of batches) {\r\n                    for (const line of batch.lines) {\r\n                        buffer[i++] = line[0].x;\r\n                        buffer[i++] = line[0].y;\r\n\r\n                        for (let iP = 1; iP < line.length - 1; iP++) {\r\n                            buffer[i++] = line[iP].x;\r\n                            buffer[i++] = line[iP].y;\r\n                            buffer[i++] = line[iP].x;\r\n                            buffer[i++] = line[iP].y;\r\n                        }\r\n\r\n                        buffer[i++] = line[line.length - 1].x;\r\n                        buffer[i++] = line[line.length - 1].y;\r\n                    }\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.linesVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.DYNAMIC_DRAW);\r\n\r\n            this.linesShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n            this.linesShader.u[\"uColor\"].value = [this.lineColor.rNormalized, this.lineColor.gNormalized, this.lineColor.bNormalized, 1];\r\n\r\n            this.linesShader.use();\r\n            const aVertexLoc = this.linesShader.a[\"aVertex\"].loc;\r\n            gl.enableVertexAttribArray(aVertexLoc);\r\n\r\n            const FLOAT_SIZE_IN_BYTES = 4;\r\n            let batchStartIndex = 0;\r\n            for (const batch of batches) {\r\n                this.linesShader.u[\"uDepth\"].value = this.computeBatchDepth(batch);\r\n                this.linesShader.bindUniforms();\r\n                gl.vertexAttribPointer(aVertexLoc, 2, gl.FLOAT, false, 0, 2 * batchStartIndex * FLOAT_SIZE_IN_BYTES);\r\n                const nbVertices = 2 * batch.nbSegments;\r\n                gl.drawArrays(gl.LINES, 0, nbVertices);\r\n                batchStartIndex += nbVertices;\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawPolygonsBatches(batches: IPolygonsBatch[]): void {\r\n        if (this.polygonsShader) {\r\n            let totalNbVertices = 0;\r\n            let totalNbTriangles = 0;\r\n            let totalNbLines = 0;\r\n            for (const polygon of batches) {\r\n                totalNbVertices += 1 + polygon.outline.length;\r\n                totalNbTriangles += polygon.outline.length;\r\n                totalNbLines += polygon.outline.length;\r\n            }\r\n\r\n            const verticesBuffer = new Float32Array(4 * totalNbVertices);\r\n            {\r\n                let iVertice = 0;\r\n                for (const polygon of batches) {\r\n                    const polygonDepth = this.computeBatchDepth(polygon);\r\n                    verticesBuffer[iVertice++] = polygon.center.x;\r\n                    verticesBuffer[iVertice++] = polygon.center.y;\r\n                    verticesBuffer[iVertice++] = polygonDepth;\r\n                    verticesBuffer[iVertice++] = 0; // padding for alignment\r\n\r\n                    for (const outlinePoint of polygon.outline) {\r\n                        verticesBuffer[iVertice++] = outlinePoint.x;\r\n                        verticesBuffer[iVertice++] = outlinePoint.y;\r\n                        verticesBuffer[iVertice++] = polygonDepth;\r\n                        verticesBuffer[iVertice++] = 0; // padding for alignment\r\n                    }\r\n                }\r\n            }\r\n\r\n            const indicesBuffer = new Uint16Array(2 * totalNbLines + 3 * totalNbTriangles);\r\n            {\r\n                let iIndex = 0;\r\n                let iVerticeIndex = 0;\r\n                for (const polygon of batches) {\r\n                    const indexOfPolygonCenter = iVerticeIndex;\r\n\r\n                    for (let iPoint = 0; iPoint < polygon.outline.length - 1; iPoint++) {\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter;\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter + iPoint + 1;\r\n                        indicesBuffer[iIndex++] = indexOfPolygonCenter + iPoint + 2;\r\n                    }\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter;\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter + polygon.outline.length;\r\n                    indicesBuffer[iIndex++] = indexOfPolygonCenter + 1;\r\n\r\n                    iVerticeIndex += polygon.outline.length + 1;\r\n                }\r\n\r\n                iVerticeIndex = 0;\r\n                for (const polygon of batches) {\r\n                    for (let iPoint = 0; iPoint < polygon.outline.length - 1; iPoint++) {\r\n                        indicesBuffer[iIndex++] = iVerticeIndex + iPoint + 1;\r\n                        indicesBuffer[iIndex++] = iVerticeIndex + iPoint + 2;\r\n                    }\r\n                    indicesBuffer[iIndex++] = iVerticeIndex + polygon.outline.length;\r\n                    indicesBuffer[iIndex++] = iVerticeIndex + 1;\r\n\r\n                    iVerticeIndex += polygon.outline.length + 1;\r\n                }\r\n            }\r\n\r\n            this.polygonsShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n\r\n            this.polygonsShader.use();\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.corollaVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, verticesBuffer, gl.DYNAMIC_DRAW);\r\n            const aDataLoc = this.polygonsShader.a[\"aData\"].loc;\r\n            gl.enableVertexAttribArray(aDataLoc);\r\n            gl.vertexAttribPointer(aDataLoc, 4, gl.FLOAT, false, 0, 0);\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.corollaIndexVBOId);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer, gl.DYNAMIC_DRAW);\r\n\r\n            this.polygonsShader.u[\"uColor\"].value = [this.fillColor.rNormalized, this.fillColor.gNormalized, this.fillColor.bNormalized, 1];\r\n            this.polygonsShader.bindUniforms();\r\n            gl.drawElements(gl.TRIANGLES, 3 * totalNbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n            this.polygonsShader.u[\"uColor\"].value = [this.lineColor.rNormalized, this.lineColor.gNormalized, this.lineColor.bNormalized, 2];\r\n            this.polygonsShader.bindUniforms();\r\n            const UNSIGNED_SHORT_SIZE_IN_BYTES = 2;\r\n            gl.drawElements(gl.LINES, 2 * totalNbLines, gl.UNSIGNED_SHORT, 3 * totalNbTriangles * UNSIGNED_SHORT_SIZE_IN_BYTES);\r\n        }\r\n    }\r\n\r\n    private drawEllipseBatches(batches: IEllipsesBatch[]): void {\r\n        if (this.ellipsesShader) {\r\n            let totalNbPoints = 0;\r\n            for (const ellipseBatch of batches) {\r\n                totalNbPoints += ellipseBatch.ellipsesList.length;\r\n            }\r\n\r\n            const buffer = new Float32Array(8 * totalNbPoints);\r\n            {\r\n                let i = 0;\r\n                for (const ellipseBatch of batches) {\r\n                    const batchDepth = this.computeBatchDepth(ellipseBatch);\r\n\r\n                    for (const ellipse of ellipseBatch.ellipsesList) {\r\n                        const widestSide = Math.ceil(Math.max(1, ellipse.width, ellipse.height)); // integer\r\n                        const proportions = Math.min(ellipse.width, ellipse.height) / widestSide; // in [0, 1]\r\n                        const encodedDimensions = Math.ceil(widestSide * this.cssPixel) + proportions;\r\n\r\n                        buffer[i++] = ellipse.center.x;\r\n                        buffer[i++] = ellipse.center.y;\r\n                        buffer[i++] = encodedDimensions;\r\n                        buffer[i++] = batchDepth;\r\n\r\n                        buffer[i++] = ellipseBatch.color.rNormalized;\r\n                        buffer[i++] = ellipseBatch.color.gNormalized;\r\n                        buffer[i++] = ellipseBatch.color.bNormalized;\r\n                        buffer[i++] = ellipse.orientation;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.ellipsesShader.u[\"uScreenSize\"].value = [this.width, this.height];\r\n            this.ellipsesShader.u[\"uPetalAlpha\"].value = this.ellipseOpacity;\r\n\r\n            this.ellipsesShader.use();\r\n            this.ellipsesShader.bindUniforms();\r\n\r\n            // gl.depthMask(false); // don't write to depth buffer\r\n\r\n            const BYTES_PER_FLOAT = 4;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.ellipsesVBOId);\r\n            gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.DYNAMIC_DRAW);\r\n            const aData1Loc = this.ellipsesShader.a[\"aData1\"].loc;\r\n            gl.enableVertexAttribArray(aData1Loc);\r\n            gl.vertexAttribPointer(aData1Loc, 4, gl.FLOAT, false, 2 * 4 * BYTES_PER_FLOAT, 0);\r\n            const aData2Loc = this.ellipsesShader.a[\"aData2\"].loc;\r\n            gl.enableVertexAttribArray(aData2Loc);\r\n            gl.vertexAttribPointer(aData2Loc, 4, gl.FLOAT, false, 2 * 4 * BYTES_PER_FLOAT, 4 * BYTES_PER_FLOAT);\r\n            gl.drawArrays(gl.POINTS, 0, totalNbPoints);\r\n        }\r\n    }\r\n\r\n    private computeBatchDepth(batch: IBatch): number {\r\n        return 1.9 * (0.5 - (batch.batchId / this.batches.length));\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvasWebGL,\r\n};\r\n\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\nimport { Line, Plotter } from \"./plotter\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nfunction radianToDegree(radian: number) {\r\n    return 180 * radian / Math.PI;\r\n}\r\n\r\nclass PlotterSvg extends Plotter {\r\n    private readonly stringParts: string[];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    public constructor(width: number, height: number) {\r\n        super();\r\n        this.stringParts = [];\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    protected initializeInternal(): void {\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this.width} ${this.height}\">`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${this.fillColor.toStringRGB()}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this.width}\" height=\"${this.height}\"/>`);\r\n        this.stringParts.push(`\\t<g fill=\"${this.fillColor.toStringRGB()}\" stroke=\"${this.lineColor.toStringRGB()}\" stroke-width=\"1\">`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        this.stringParts.push(\"\\t</g>\");\r\n        this.stringParts.push(\"</svg>\");\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.stringParts.join(\"\\n\");\r\n    }\r\n\r\n    public drawLines(lines: Line[]): void {\r\n        if (lines.length >= 1) {\r\n            this.stringParts.push(`\\t\\t<g fill=\"none\">`);\r\n\r\n            for (const line of lines) {\r\n                if (line.length >= 2) {\r\n                    this.stringParts.push(`\\t\\t\\t<path d=\"${PlotterSvg.computePath(line)}\"/>`);\r\n                }\r\n            }\r\n\r\n            this.stringParts.push(`\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    public drawPolygon(polygon: Line, offset: IPoint): void {\r\n        if (polygon.length >= 2) {\r\n            const transform = `translate(${offset.x.toFixed(1)} ${offset.y.toFixed(1)})`;\r\n            this.stringParts.push(`\\t\\t<path d=\"${PlotterSvg.computePath(polygon)}Z\" transform=\"${transform}\"/>`);\r\n        }\r\n    }\r\n\r\n    public drawEllipses(ellipses: IEllipse[], color: Color): void {\r\n        if (ellipses.length >= 1) {\r\n            this.stringParts.push(`\\t\\t<g stroke=\"none\" fill=\"${color.toStringRGBA(this.ellipseOpacity)}\">`);\r\n            for (const ellipse of ellipses) {\r\n                const transform = `translate(${ellipse.center.x.toFixed(1)} ${ellipse.center.y.toFixed(1)}) rotate(${radianToDegree(ellipse.orientation).toFixed(1)})`;\r\n                this.stringParts.push(`\\t\\t\\t<ellipse cx=\"0\" cy=\"0\" rx=\"${(0.5 * ellipse.width).toFixed(1)}\" ry=\"${(0.5 * ellipse.height).toFixed(1)}\" transform=\"${transform}\"/>`);\r\n            }\r\n            this.stringParts.push(`\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    private static computePath(line: Line): string {\r\n        const start = `M${line[0].x.toFixed(1)},${line[0].y.toFixed(1)}L`;\r\n\r\n        const pathParts: string[] = [];\r\n        for (let iP = 1; iP < line.length; iP++) {\r\n            pathParts.push(`${line[iP].x.toFixed(1)},${line[iP].y.toFixed(1)}`);\r\n        }\r\n\r\n        return start + pathParts.join(\" \");\r\n    }\r\n}\r\n\r\nexport { PlotterSvg };\r\n\r\n","import { IEllipse, IPoint } from \"../interfaces\";\r\nimport { Color } from \"./color\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\ntype Line = IPoint[];\r\n\r\nabstract class Plotter {\r\n    protected fillColor: Color;\r\n    protected lineColor: Color;\r\n    protected ellipseOpacity: number; // in [0,1]\r\n\r\n    public initialize(fillColor: Color, lineColor: Color, ellipseOpacity: number): void {\r\n        this.fillColor = fillColor;\r\n        this.lineColor = lineColor;\r\n        this.ellipseOpacity = ellipseOpacity;\r\n        this.initializeInternal();\r\n    }\r\n\r\n    protected abstract initializeInternal(): void;\r\n\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawLines(lines: Line[]): void;\r\n\r\n    public abstract drawPolygon(polygon: Line, offset: IPoint): void;\r\n\r\n    public abstract drawEllipses(ellipses: IEllipse[], color: Color): void;\r\n}\r\n\r\nexport {\r\n    Line,\r\n    Plotter,\r\n};\r\n\r\n","import { IPoint, IVector } from \"./interfaces\";\r\nimport { Line } from \"./plotting/plotter\";\r\n\r\ninterface IRopeNode {\r\n    pos: IPoint;\r\n    previousPos: IPoint;\r\n    acc: IVector;\r\n}\r\n\r\nfunction createRopeNode(x: number, y: number): IRopeNode {\r\n    return {\r\n        pos: { x, y },\r\n        previousPos: { x, y },\r\n        acc: { x: 0, y: 0 },\r\n    };\r\n}\r\n\r\nconst NB_ITERATIONS = 8;\r\n\r\nclass Rope {\r\n    public dampening: number = 1;\r\n\r\n    private readonly nodes: IRopeNode[];\r\n    private readonly segmentLength: number;\r\n    private readonly totalLength: number;\r\n\r\n    public constructor(startingPoint: IPoint, segmentLength: number, nbNodes: number) {\r\n        this.segmentLength = segmentLength;\r\n        this.totalLength = segmentLength * nbNodes;\r\n\r\n        this.nodes = [];\r\n        this.nodes.push(createRopeNode(startingPoint.x, startingPoint.y));\r\n        for (let iN = 0; iN < nbNodes; iN++) {\r\n            const angle = 2 * Math.PI * Math.random();\r\n            this.nodes.push(createRopeNode(\r\n                this.nodes[this.nodes.length - 1].pos.x + segmentLength * Math.cos(angle),\r\n                this.nodes[this.nodes.length - 1].pos.y + Math.abs(segmentLength * Math.sin(angle))\r\n            ));\r\n        }\r\n    }\r\n\r\n    public getDrawableLine(minSegmentLength: number): Line {\r\n        return this.computeSmoothLine(this.totalLength / minSegmentLength);\r\n    }\r\n\r\n    public update(dt: number, origin: IPoint, endAcceleration: IVector): void {\r\n        this.applyForces(endAcceleration);\r\n        this.applyVerlet(dt);\r\n\r\n        for (let i = 0; i < NB_ITERATIONS; i++) {\r\n            this.applyConstraints(origin);\r\n        }\r\n    }\r\n\r\n    public get endPosition(): IPoint {\r\n        return this.nodes[this.nodes.length - 1].pos;\r\n    }\r\n\r\n    public get highestPoint(): number {\r\n        let highest = 1000000;\r\n        for (const node of this.nodes) {\r\n            if (node.pos.y < highest) {\r\n                highest = node.pos.y;\r\n            }\r\n        }\r\n        return highest;\r\n    }\r\n\r\n    private applyForces(endAcceleration: IVector): void {\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            this.nodes[iN].acc.x = 0;\r\n            this.nodes[iN].acc.y = 0;\r\n        }\r\n\r\n        this.nodes[this.nodes.length - 1].acc.x += endAcceleration.x;\r\n        this.nodes[this.nodes.length - 1].acc.y += endAcceleration.y;\r\n    }\r\n\r\n    private applyVerlet(dt: number): void {\r\n        for (const node of this.nodes) {\r\n            // CURRENT_VELOCITY = (CURRENT_POSITION - PREVIOUS_POSITION) / DT\r\n            // NEW_VELOCITY = DAMPENING * CURRENT_VELOCITY + CURRENT_ACCELERATION * DT\r\n            // NEW_POSITION = CURRENT_POSITION + NEW_VELOCITY * DT\r\n\r\n            const newPosX = node.pos.x + this.dampening * (node.pos.x - node.previousPos.x) + dt * dt * node.acc.x;\r\n            const newPosY = node.pos.y + this.dampening * (node.pos.y - node.previousPos.y) + dt * dt * node.acc.y;\r\n\r\n            node.previousPos.x = node.pos.x;\r\n            node.previousPos.y = node.pos.y;\r\n            node.pos.x = newPosX;\r\n            node.pos.y = newPosY;\r\n        }\r\n    }\r\n\r\n    private applyConstraints(origin: IPoint): void {\r\n        const EPSILON = 0.000001;\r\n        this.nodes[0].pos.x = origin.x;\r\n        this.nodes[0].pos.y = origin.y;\r\n\r\n        for (let iN = 1; iN < this.nodes.length; iN++) {\r\n            const dX = this.nodes[iN].pos.x - this.nodes[iN - 1].pos.x;\r\n            const dY = this.nodes[iN].pos.y - this.nodes[iN - 1].pos.y;\r\n            const distanceToPrevious = Math.sqrt(dX * dX + dY * dY);\r\n            const correction = 0.5 * (1 - this.segmentLength / (distanceToPrevious + EPSILON));\r\n            const correctionX = dX * correction;\r\n            const correctionY = dY * correction;\r\n\r\n            this.nodes[iN].pos.x -= correctionX;\r\n            this.nodes[iN].pos.y -= correctionY;\r\n            this.nodes[iN - 1].pos.x += correctionX;\r\n            this.nodes[iN - 1].pos.y += correctionY;\r\n        }\r\n    }\r\n\r\n    private computeSmoothLine(minimumPoints: number): IPoint[] {\r\n        let points: IPoint[] = [];\r\n        for (const node of this.nodes) {\r\n            points.push(node.pos);\r\n        }\r\n\r\n        while (points.length < minimumPoints) {\r\n            points = Rope.subdivideLine(points, 0.333);\r\n        }\r\n        return points;\r\n    }\r\n\r\n    // Chaikin\r\n    private static subdivideLine(sourcePoints: IPoint[], ratio: number): IPoint[] {\r\n        const newPoints: IPoint[] = [];\r\n        newPoints.push(sourcePoints[0]);\r\n\r\n        for (let iP = 0; iP < sourcePoints.length - 1; iP++) {\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * (1 - ratio) + sourcePoints[iP + 1].x * ratio,\r\n                y: sourcePoints[iP].y * (1 - ratio) + sourcePoints[iP + 1].y * ratio,\r\n            });\r\n            newPoints.push({\r\n                x: sourcePoints[iP].x * ratio + sourcePoints[iP + 1].x * (1 - ratio),\r\n                y: sourcePoints[iP].y * ratio + sourcePoints[iP + 1].y * (1 - ratio),\r\n            });\r\n        }\r\n\r\n        newPoints.push(sourcePoints[sourcePoints.length - 1]);\r\n        return newPoints;\r\n    }\r\n}\r\n\r\nexport { Rope };\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FlowersManager } from \"./flowers-manager\";\r\nimport { ForceField } from \"./force-field\";\r\nimport { downloadTextFile } from \"./helpers\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { Plotter } from \"./plotting/plotter\";\r\nimport { PlotterCanvas2D } from \"./plotting/plotter-canvas-2d\";\r\nimport { PlotterCanvas } from \"./plotting/plotter-canvas-base\";\r\nimport { PlotterCanvasWebGL } from \"./plotting/plotter-canvas-webgl\";\r\nimport { PlotterSvg } from \"./plotting/plotter-svg\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\nfunction plot(flowersManager: FlowersManager, plotter: Plotter): void {\r\n    plotter.initialize(Parameters.backgroundColor, Parameters.linesColor, Parameters.petalsOpacity);\r\n    flowersManager.draw(plotter);\r\n    plotter.finalize();\r\n}\r\n\r\nfunction main() {\r\n    const plotter: PlotterCanvas = Parameters.useCanvas2D ? new PlotterCanvas2D() : new PlotterCanvasWebGL();\r\n    const flowersManager = new FlowersManager();\r\n\r\n    Parameters.addResetObserver(() => { flowersManager.reset(); });\r\n    Parameters.addDownloadObserver(() => { exportAsSvg(flowersManager, plotter.width, plotter.height); });\r\n\r\n    const maxDt = 1 / 60;\r\n    let lastUpdate = performance.now();\r\n    function mainLoop() {\r\n        const now = performance.now();\r\n        const dt = Parameters.speed * Math.min(maxDt, 0.001 * (now - lastUpdate));\r\n        lastUpdate = now;\r\n\r\n        plotter.adjustToCanvas();\r\n\r\n        flowersManager.manage(plotter.width, plotter.height);\r\n\r\n        const forceField = new ForceField(Parameters.mousePositionInPixels, 500);\r\n        flowersManager.update(dt, forceField);\r\n\r\n        plot(flowersManager, plotter);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nfunction exportAsSvg(flowersManager: FlowersManager, width: number, height: number): void {\r\n    const plotter = new PlotterSvg(width, height);\r\n    plot(flowersManager, plotter);\r\n\r\n    const svgText = plotter.toString();\r\n    downloadTextFile(\"flowers.svg\", svgText);\r\n}\r\n\r\nmain();\r\n"],"names":["random","randomChannel","this","position","x","y","color","Noise","randomInRange","Math","floor","Color","initialPetalsCount","Parameters","petalsCount","attachedPetals","computePetals","floatingPetals","outline","Corolla","computeOutline","noise","maxLiftingForce","update","dt","length","petalsDropRate","detachedPetal","pop","center","rotationSpeed","push","petalArea","orientation","trimFloatingPetals","wind","compute","draw","plotter","drawOutline","drawPetals","getAcceleration","forceField","strength","pow","acceleration","fieldForce","computeForce","isDead","lowestAllowed","allPetals","concat","singlePetalColor","petalColor","drawEllipses","drawPolygon","iP","max","width","height","splice","nbPetals","result","i","PI","petalsDroprate","outlineNbPoints","outlineRadius","angle","radius","cos","sin","attachPoint","nbNodes","Flower","maxSegmentLength","stem","Rope","corolla","attachCorolla","corollaAcceleration","dampening","getDrawableStem","getDrawableLine","drawCorolla","highestPoint","endPosition","flowers","reset","manage","domainWidth","domainHeight","idealNumberOfFlowers","round","flowersDensity","newFlower","FlowersManager","createFlower","iF","stems","flower","drawLines","flowerLength","mousePosition","maxInfluenceDistance","fleeMouseEnabled","fleeMouse","location","fromMouseX","fromMouseY","distanceToMouse","sqrt","mouseInfluence","ForceField","gl","initGL","flags","setError","message","Page","Demopage","setErrorMessage","canvas","Canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","clientWidth","clientHeight","_gl","GLResource","cachedShaders","buildShader","infos","callback","sourcesPending","sourcesFailed","loadedSource","success","processSource","source","replace","match","name","injected","shader","vert","ShaderSources","getSource","vertexFilename","frag","fragmentFilename","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","builtShader","deleteShader","freeGLResources","cachedSources","filename","text","XMLHttpRequest","open","onload","readyState","status","responseText","console","error","statusText","onerror","send","notImplemented","alert","types","str","binder","value","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","id","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","use","useProgram","bindUniforms","currTextureUnitNb","Object","keys","u","forEach","uName","uniform","loc","bindAttributes","a","aName","attribute","VBO","bind","bindUniformsAndAttributes","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","size","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","downloadTextFile","fileName","content","fileType","blob","Blob","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","period","time","last","next","randomVector","r","from","to","controlId","callObservers","observers","observer","resetObservers","downloadObservers","callResetObservers","getColor","rgb","ColorPicker","getValue","g","b","backgroundColor","addObserver","linesColor","petalsColor","getMousePosition","canvasSize","getSize","Range","Checkbox","isChecked","addResetObserver","addDownloadObserver","toLowerCase","indexOf","updatePetalColorsVisibility","visible","Controls","setVisibility","Button","addLazyObserver","Observers","canvasResize","FileControl","rNormalized","gNormalized","bNormalized","toStringRGB","toStringRGBA","alpha","ellipsePolyfill","centerX","centerY","radiusX","radiusY","arc","context","lineWidth","initializeInternal","fillStyle","fillColor","fillRect","finalize","lines","strokeStyle","lineColor","beginPath","line","moveTo","lineTo","stroke","closePath","polygon","offset","fill","ellipses","ellipseOpacity","ellipse","PlotterCanvas","PlotterCanvas2D","adjustToCanvas","actualWidth","actualHeight","_width","_height","Plotter","EBatchType","loadShader","ShaderManager","errorMessage","Error","enable","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthFunc","LEQUAL","clearDepth","linesVBOId","createBuffer","ellipsesVBOId","corollaVBOId","corollaIndexVBOId","linesShader","ellipsesShader","polygonsShader","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","batches","linesBatch","polygonsBatch","ellipsesBatch","batch","LINES","POLYGONS","ELLIPSES","drawLinesBatches","depthMask","drawPolygonsBatches","drawEllipseBatches","nonTrivalLines","nbSegments","batchId","point","polygonBatch","ellipsesList","totalNbSegments","buffer","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","aVertexLoc","enableVertexAttribArray","batchStartIndex","computeBatchDepth","vertexAttribPointer","FLOAT","nbVertices","drawArrays","totalNbVertices","totalNbTriangles","totalNbLines","verticesBuffer","iVertice","polygonDepth","outlinePoint","indicesBuffer","Uint16Array","iIndex","iVerticeIndex","indexOfPolygonCenter","iPoint","aDataLoc","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","UNSIGNED_SHORT","totalNbPoints","ellipseBatch","batchDepth","widestSide","ceil","proportions","min","encodedDimensions","aData1Loc","aData2Loc","POINTS","PlotterCanvasWebGL","stringParts","toString","join","PlotterSvg","computePath","transform","toFixed","radian","start","pathParts","initialize","createRopeNode","pos","previousPos","acc","startingPoint","segmentLength","totalLength","nodes","iN","abs","minSegmentLength","computeSmoothLine","origin","endAcceleration","applyForces","applyVerlet","applyConstraints","highest","node","newPosX","newPosY","dX","dY","distanceToPrevious","correction","correctionX","correctionY","minimumPoints","points","subdivideLine","sourcePoints","ratio","newPoints","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","plot","flowersManager","petalsOpacity","useCanvas2D","svgText","exportAsSvg","lastUpdate","performance","now","requestAnimationFrame","mainLoop","speed","mousePositionInPixels","main"],"sourceRoot":""}